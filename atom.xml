<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>以写作调身心</title>
  
  <subtitle>熟能生巧，勤能补拙；念念不忘，必有回响。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://octopuslian.github.io/"/>
  <updated>2020-11-29T11:03:12.704Z</updated>
  <id>https://octopuslian.github.io/</id>
  
  <author>
    <name>Neo Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>极客时间_7天算法体验营_Day1-时间复杂度和空间复杂度分析</title>
    <link href="https://octopuslian.github.io/2020/11/29/geekbang-live-a-week-algo-training-camp-1-time-space-complex-analyze/"/>
    <id>https://octopuslian.github.io/2020/11/29/geekbang-live-a-week-algo-training-camp-1-time-space-complex-analyze/</id>
    <published>2020-11-29T15:16:06.000Z</published>
    <updated>2020-11-29T11:03:12.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="常见的7种时间复杂度"><a href="#常见的7种时间复杂度" class="headerlink" title="常见的7种时间复杂度"></a>常见的7种时间复杂度</h2><ul><li>O(1)：常数复杂度；</li><li>O(log n)：对数复杂度；</li><li>O(n)：线性时间复杂度；</li><li>O(n^2)：平方；</li><li>O(n^3)：立方；</li><li>O(2^n)：指数；</li><li>O(n!)：阶乘法。</li></ul><h2 id="通过代码来分析时间复杂度-Golang"><a href="#通过代码来分析时间复杂度-Golang" class="headerlink" title="通过代码来分析时间复杂度(Golang)"></a>通过代码来分析时间复杂度(Golang)</h2><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n := <span class="number">100</span></span><br><span class="line">fmt.Print(n)</span><br></pre></td></tr></table></figure><p>程序只执行1次。</p><h3 id="O-N"><a href="#O-N" class="headerlink" title="O(N)"></a>O(N)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=n;i++ &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello:"</span>,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将<code>fmt.Println(&quot;hello&quot;)</code>执行了n次。</p><h3 id="O-N-2"><a href="#O-N-2" class="headerlink" title="O(N^2)"></a>O(N^2)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=n;i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span>;j&lt;=n;j++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">"hello:"</span>,i,j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将<code>fmt.Println(&quot;hello&quot;)</code>执行力n*n=n^2次。</p><p>拓展：如果是以下代码，时间复杂度是多少？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=n;i++ &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello:"</span>,i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">1</span>;j&lt;=n;j++ &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello:"</span>,j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为两个循环是并列关系，所以<code>fmt.Println(&quot;hello&quot;)</code>被执行了2*n次，我们忽略常数系数，所以时间复杂度是O(N)。</p><p><strong>总结：如果循环是N层嵌套关系，则时间复杂度是O(N^N)，如果循环是并列关系，则时间复杂度是O(N)。</strong></p><h3 id="O-log-n"><a href="#O-log-n" class="headerlink" title="O(log(n))"></a>O(log(n))</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n;i=i*<span class="number">2</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello:,"</span>i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O-k-n"><a href="#O-k-n" class="headerlink" title="O(k^n)"></a>O(k^n)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个递归程序。</p><h2 id="时间复杂度曲线图"><a href="#时间复杂度曲线图" class="headerlink" title="时间复杂度曲线图"></a>时间复杂度曲线图</h2><p><img src="/2020/11/29/geekbang-live-a-week-algo-training-camp-1-time-space-complex-analyze/time.png" alt></p><ul><li>一定要在写程序的时候时刻考虑时间复杂度；</li><li>能够用最简单的时间复杂度和空间复杂度完成这段程序的话基本是一个顶尖职业选手的必备素养。</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="计算1-2-3-…-n"><a href="#计算1-2-3-…-n" class="headerlink" title="计算1+2+3+…+n"></a>计算1+2+3+…+n</h3><h4 id="方法一：循环"><a href="#方法一：循环" class="headerlink" title="方法一：循环"></a>方法一：循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = 0</span><br><span class="line">for i = 1 to n:</span><br><span class="line">    y += i</span><br></pre></td></tr></table></figure><p>时间复杂度O(n)</p><h4 id="方法二：求和公式"><a href="#方法二：求和公式" class="headerlink" title="方法二：求和公式"></a>方法二：求和公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = n * (n + 1) / 2</span><br></pre></td></tr></table></figure><p>时间复杂度O(1)</p><h3 id="求斐波那契数列第n项和"><a href="#求斐波那契数列第n项和" class="headerlink" title="求斐波那契数列第n项和"></a>求斐波那契数列第n项和</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画出递归树分析时间复杂度：</p><p><img src="/2020/11/29/geekbang-live-a-week-algo-training-camp-1-time-space-complex-analyze/tree.png" alt></p><h2 id="主定理（重要）"><a href="#主定理（重要）" class="headerlink" title="主定理（重要）"></a>主定理（重要）</h2><p><img src="/2020/11/29/geekbang-live-a-week-algo-training-camp-1-time-space-complex-analyze/master.png" alt></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ul><li><p>二叉树遍历-前序、中序、后序：时间复杂度是多少？</p></li><li><p>图的遍历：时间复杂度是多少？</p></li><li><p>搜索算法：DFS、BFS时间复杂度是多少？</p></li><li><p>二分查找：时间复杂度是多少？</p></li></ul><h2 id="面试四件套"><a href="#面试四件套" class="headerlink" title="面试四件套"></a>面试四件套</h2><ul><li>１，和面试官沟通清楚问题，扫清问题的盲点；</li><li>２，想所有可能的解决方案；</li><li>３，比较时间和空间复杂度，找出最优解；</li><li>４，写程序实现；</li><li>５，测试结果。</li></ul><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>通过亮点来分析：</p><ul><li><p>数组的长度</p></li><li><p>递归的深度（特殊说明）</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><a href="https://leetcode-cn.com/problems/climbing-stairs/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs/solution/</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>常用工具配置</li><li>基本功和编程功法</li><li>常见的时间、空间复杂度</li></ul><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>我最开始体会到时间复杂度的优势是在大二参加算法竞赛前夕，犹记得在搜索某一个算法题目的题解的时候，眼睁睁看着作者将一段复杂的程序通过微积分优化成一行简易的代码，AC一遍直接通过，这使我留下了时刻的印象。<br>工作后虽然我主要做的是开发，但有些优化时间复杂度的思想有时也会用在业务逻辑中，希望我后期可以<strong>最简单的时间复杂度和空间复杂度完成一段程序，达到职业选手的素养！</strong></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://www.zhihu.com/question/21387264/answer/422323594" target="_blank" rel="noopener">知乎_如何理解算法时间复杂度的表示法，例如 O(n²)、O(n)、O(1)、O(nlogn) 等？</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;常见的7种时间复杂度&quot;&gt;&lt;a href=&quot;#常见的7种时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;常见的7种时间复杂度&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="算法学习" scheme="https://octopuslian.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="https://octopuslian.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="体验营" scheme="https://octopuslian.github.io/tags/%E4%BD%93%E9%AA%8C%E8%90%A5/"/>
    
      <category term="极客时间" scheme="https://octopuslian.github.io/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>极客时间_直播 畅聊技术人学习&amp;晋升法则</title>
    <link href="https://octopuslian.github.io/2020/11/25/geektime-live-thanksgiving-share-work-experience/"/>
    <id>https://octopuslian.github.io/2020/11/25/geektime-live-thanksgiving-share-work-experience/</id>
    <published>2020-11-25T11:58:24.000Z</published>
    <updated>2020-11-25T14:34:14.183Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="李运华-聊聊晋升背后的“潜规则”"><a href="#李运华-聊聊晋升背后的“潜规则”" class="headerlink" title="李运华_聊聊晋升背后的“潜规则”"></a>李运华_聊聊晋升背后的“潜规则”</h2><h3 id="明面上的晋升规则"><a href="#明面上的晋升规则" class="headerlink" title="明面上的晋升规则"></a>明面上的晋升规则</h3><p>绩效+年限+红线+附件条件</p><h3 id="价值原则"><a href="#价值原则" class="headerlink" title="价值原则"></a>价值原则</h3><p><strong>员工为企业创造了价值，且能力提升了，才有机会晋升。</strong></p><ul><li><p>不能只埋头干活，要考虑通过做事和自我学习来提升能力</p></li><li><p>能力提升要能为企业带来价值，不要“自嗨式”提升</p></li><li><p>企业会有一套流程机制来防止“拉关系”晋升</p></li></ul><h3 id="成长原则"><a href="#成长原则" class="headerlink" title="成长原则"></a>成长原则</h3><p><strong>能力提升到下一级别，才有机会晋升。</strong></p><ul><li><p>不要沉迷已有的熟练技能带来的满足感，要主动“打破舒适区”</p></li><li><p>不管业务结果好坏，你都可以成长，关键在于“总结提炼”</p></li><li><p>一年经验重复五年是不能满足晋升要求的</p></li></ul><h3 id="主动原则"><a href="#主动原则" class="headerlink" title="主动原则"></a>主动原则</h3><p><strong>主动寻找晋升机会，才有机会晋升。</strong></p><ul><li><p>明确自己的晋升规划，找主管沟通达成一致；</p></li><li><p>主动挖掘成长点，包括专业能力、业务能力、管理能力；</p></li><li><p>主动争取更大的任务和挑战，不要被动等待别人安排任务<br>（建议一年聊一次）</p></li></ul><h2 id="李佳-从100多位老师身上得到的5点启发"><a href="#李佳-从100多位老师身上得到的5点启发" class="headerlink" title="李佳_从100多位老师身上得到的5点启发"></a>李佳_从100多位老师身上得到的5点启发</h2><h3 id="工作那么忙，哪来时间学习？"><a href="#工作那么忙，哪来时间学习？" class="headerlink" title="工作那么忙，哪来时间学习？"></a>工作那么忙，哪来时间学习？</h3><ul><li>减少精力消耗，脑子决策时间，要程序化工作；</li><li>管理自己的理念，10分钟也能学很多东西；</li></ul><h3 id="不擅长的事如何快速解决？"><a href="#不擅长的事如何快速解决？" class="headerlink" title="不擅长的事如何快速解决？"></a>不擅长的事如何快速解决？</h3><ul><li>找个好老师且自己值得被帮助</li><li>20个小时速成一个技能</li></ul><h3 id="学好英语的程序员有多爽？"><a href="#学好英语的程序员有多爽？" class="headerlink" title="学好英语的程序员有多爽？"></a>学好英语的程序员有多爽？</h3><ul><li>微习惯，知行合一</li><li>推荐《老友记》</li><li>每天看一段《This is water》</li></ul><h3 id="事事较真好不好？"><a href="#事事较真好不好？" class="headerlink" title="事事较真好不好？"></a>事事较真好不好？</h3><ul><li>较真，是因为执念</li><li>不较真，是因为开放</li><li>讲究而不将就</li></ul><h3 id="35岁焦虑吗？"><a href="#35岁焦虑吗？" class="headerlink" title="35岁焦虑吗？"></a>35岁焦虑吗？</h3><ul><li>踏踏实实，认真做事，没有心思去焦虑</li><li>首先要认可自己的焦虑</li><li>克服焦虑从行动开始，而行动从习惯中养成</li><li>花上10-30分钟吐槽焦虑，然后投入工作</li></ul><h2 id="池建强-写作是职场人最重要的通用技能之一"><a href="#池建强-写作是职场人最重要的通用技能之一" class="headerlink" title="池建强_写作是职场人最重要的通用技能之一"></a>池建强_写作是职场人最重要的通用技能之一</h2><ul><li>推荐书《软件随想录》</li><li>写作可以推广你的思想，让你更加有影响</li></ul><h2 id="池建强-学习从来不该急功近利"><a href="#池建强-学习从来不该急功近利" class="headerlink" title="池建强_学习从来不该急功近利"></a>池建强_学习从来不该急功近利</h2><ul><li>１，树立目标</li><li>２，拆解</li><li>３，奖励</li><li>４，产出</li></ul><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;李运华-聊聊晋升背后的“潜规则”&quot;&gt;&lt;a href=&quot;#李运华-聊聊晋升背后的“潜规则”&quot; class=&quot;headerlink&quot; title=&quot;李
      
    
    </summary>
    
    
      <category term="直播分享" scheme="https://octopuslian.github.io/categories/%E7%9B%B4%E6%92%AD%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="直播" scheme="https://octopuslian.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="极客时间" scheme="https://octopuslian.github.io/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
      <category term="感恩节" scheme="https://octopuslian.github.io/tags/%E6%84%9F%E6%81%A9%E8%8A%82/"/>
    
      <category term="职场" scheme="https://octopuslian.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>头可断血可流发型不可乱</title>
    <link href="https://octopuslian.github.io/2020/11/18/the-head-can-be-broken-and-blood-can-flow-but-the-hairstyle-can-not-be-messy/"/>
    <id>https://octopuslian.github.io/2020/11/18/the-head-can-be-broken-and-blood-can-flow-but-the-hairstyle-can-not-be-messy/</id>
    <published>2020-11-18T13:59:11.000Z</published>
    <updated>2020-11-18T14:29:10.158Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>最近新出了个抗日神剧叫《雷霆战将》，被人民日报点名批评，播出一周被下架，很好奇的我看了一些片段，直呼毁三观。</p><p>《雷霆战将》约等于《亮剑3》，里面剧情和亮剑一模一样，就是名字变了，梳理了以下，糟点如下：</p><ul><li>抗日时期住别墅；(请问都住别墅了还打什么仗)</li><li>第二集就开始抛媚眼，把战争剧演成了偶像剧；</li><li>抗战时期护士穿裙子；</li><li>将军头上顶着发胶；</li><li>打仗期间还不忘抽雪茄；<br>等等…</li></ul><p>真TM无力吐槽，从亮剑翻拍，手撕鬼子，到现在又出现了《雷霆战将》，演技真让我作呕，我不晓得导演编剧和审核的人是出于什么样的目的，就从战争这个角度来看这种剧就不该出现！！！</p><p>经典不容超越和翻拍，那是我觉得不尊重的表现。</p><p>最后引用李云龙的一段配音作为结束，讽刺那些想翻拍经典博得关注和票房的人————</p><p>李云龙对赵政委说：<strong>我刚接手新一团的时候，部队发型乱，缺少护发经验，最重要的是缺少发胶，啫喱水全团不到十瓶，焗油一瓶都没有，发胶还是老牌发蜡，就这样，两个人还分不到一瓶发胶，我去找旅长要，你猜旅长怎么说，旅长说，要发胶没有，要命一条，你李云龙看我脑袋值多少发胶，就砍了去换发胶，你有能耐当团长，就想办法去弄发蜡，少拿这点破事烦我。——得嘞，我等的就是这句话，一年之后，新一团什么都有了，沙贝龙，海飞丝，焗油机，烫发机，还有几个漂亮的洗头妹，没有这些，我敢跟坂田联队硬碰硬PK发型，做梦去吧。</strong></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;最近新出了个抗日神剧叫《雷霆战将》，被人民日报点名批评，播出一周被下架，很好奇的我看了一些片段，直呼毁三观。&lt;/p&gt;&lt;p&gt;《雷霆战将》约等于《亮剑3》，里面
      
    
    </summary>
    
    
      <category term="影评" scheme="https://octopuslian.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="神剧" scheme="https://octopuslian.github.io/tags/%E7%A5%9E%E5%89%A7/"/>
    
      <category term="吐槽" scheme="https://octopuslian.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
      <category term="毁三观" scheme="https://octopuslian.github.io/tags/%E6%AF%81%E4%B8%89%E8%A7%82/"/>
    
      <category term="雷霆战将" scheme="https://octopuslian.github.io/tags/%E9%9B%B7%E9%9C%86%E6%88%98%E5%B0%86/"/>
    
  </entry>
  
  <entry>
    <title>使用FFmpeg对视频增加转场特技功能</title>
    <link href="https://octopuslian.github.io/2020/11/17/ffmpeg-add-opengl/"/>
    <id>https://octopuslian.github.io/2020/11/17/ffmpeg-add-opengl/</id>
    <published>2020-11-17T04:02:28.000Z</published>
    <updated>2020-11-18T14:01:04.249Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>先来看网上存在的一个<code>ffmpeg</code>脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Example of concatenating 3 mp4s together with 1-second transitions between them.</span></span><br><span class="line"></span><br><span class="line">tpath=<span class="string">"/ffmpeg/transitions/"</span></span><br><span class="line">x264=<span class="string">"-look_ahead 0 -ac 2 -c:v h264_qsv -profile:v high -level 3.1 -preset:v veryfast"</span></span><br><span class="line">ki=<span class="string">"-keyint_min 72 -g 72 -sc_threshold 0"</span></span><br><span class="line">br=<span class="string">"-b:v 3000k -minrate 3000k -maxrate 6000k -bufsize 6000k -b:a 128k"</span></span><br><span class="line"></span><br><span class="line">ffmpeg -hide_banner \</span><br><span class="line">  -i 1.mp4 \</span><br><span class="line">  -i 2.mp4 \</span><br><span class="line">  -i 3.mp4 \</span><br><span class="line">  -filter_complex <span class="string">" \</span></span><br><span class="line"><span class="string">    [0:a]   atrim=0:5  [a0]; \</span></span><br><span class="line"><span class="string">    [1:a]   atrim=0:5  [a1]; \</span></span><br><span class="line"><span class="string">    [2:a]   atrim=0:6  [a2]; \</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    [0:v]   split  [v000] [v010]; \</span></span><br><span class="line"><span class="string">    [1:v]   split  [v100] [v110]; \</span></span><br><span class="line"><span class="string">    [2:v]   split  [v200] [v210]; \</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    [v000]  trim=0:5                [v001];  \</span></span><br><span class="line"><span class="string">    [v010]  trim=5:6                [v011t]; \</span></span><br><span class="line"><span class="string">    [v011t] setpts=PTS-STARTPTS     [v011];  \</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    [v100]   trim=0:5               [v101];  \</span></span><br><span class="line"><span class="string">    [v110]   trim=5:6               [v111t]; \</span></span><br><span class="line"><span class="string">    [v111t]  setpts=PTS-STARTPTS    [v111];  \</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    [v200]     trim=0:5             [v201];  \</span></span><br><span class="line"><span class="string">    [v210]     trim=5:6             [v211t]; \</span></span><br><span class="line"><span class="string">    [v211t]    setpts=PTS-STARTPTS  [v211];  \</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    [v011] [v101] gltransition=duration=1:source=<span class="variable">$&#123;tpath&#125;</span>WaterDrop.glsl  [vt0]; \</span></span><br><span class="line"><span class="string">    [v111] [v201] gltransition=duration=1:source=<span class="variable">$&#123;tpath&#125;</span>crosswarp.glsl  [vt1]; \</span></span><br><span class="line"><span class="string">    \</span></span><br><span class="line"><span class="string">    [v001] [vt0] [vt1] [v211]  concat=n=4          [outv]; \</span></span><br><span class="line"><span class="string">    [a0] [a1] [a2]             concat=n=3:v=0:a=1  [outa]"</span> \</span><br><span class="line">  -map [outv] -map [outa] \</span><br><span class="line">  <span class="variable">$&#123;x264&#125;</span> <span class="variable">$&#123;ki&#125;</span> <span class="variable">$&#123;br&#125;</span> \</span><br><span class="line">  -y ffmpeg-gl-transition-concat.mp4</span><br></pre></td></tr></table></figure><h3 id="流程简介"><a href="#流程简介" class="headerlink" title="流程简介"></a>流程简介</h3><p><code>github</code>上的脚本如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Example of concatenating 3 mp4s together with 1-second transitions between them.</span></span><br><span class="line"></span><br><span class="line">./ffmpeg \</span><br><span class="line">  -i media/0.mp4 \</span><br><span class="line">  -i media/1.mp4 \</span><br><span class="line">  -i media/2.mp4 \</span><br><span class="line">  -filter_complex <span class="string">" \</span></span><br><span class="line"><span class="string">    [0:v]split[v000][v010]; \</span></span><br><span class="line"><span class="string">    [1:v]split[v100][v110]; \</span></span><br><span class="line"><span class="string">    [2:v]split[v200][v210]; \</span></span><br><span class="line"><span class="string">    [v000]trim=0:3[v001]; \</span></span><br><span class="line"><span class="string">    [v010]trim=3:4[v011t]; \</span></span><br><span class="line"><span class="string">    [v011t]setpts=PTS-STARTPTS[v011]; \</span></span><br><span class="line"><span class="string">    [v100]trim=0:3[v101]; \</span></span><br><span class="line"><span class="string">    [v110]trim=3:4[v111t]; \</span></span><br><span class="line"><span class="string">    [v111t]setpts=PTS-STARTPTS[v111]; \</span></span><br><span class="line"><span class="string">    [v200]trim=0:3[v201]; \</span></span><br><span class="line"><span class="string">    [v210]trim=3:4[v211t]; \</span></span><br><span class="line"><span class="string">    [v211t]setpts=PTS-STARTPTS[v211]; \</span></span><br><span class="line"><span class="string">    [v011][v101]gltransition=duration=1:source=./crosswarp.glsl[vt0]; \</span></span><br><span class="line"><span class="string">    [v111][v201]gltransition=duration=1[vt1]; \</span></span><br><span class="line"><span class="string">    [v001][vt0][vt1][v211]concat=n=4[outv]"</span> \</span><br><span class="line">  -map <span class="string">"[outv]"</span> \</span><br><span class="line">  -c:v libx264 -profile:v baseline -preset slow -movflags faststart -pix_fmt yuv420p \</span><br><span class="line">  -y out.mp4</span><br></pre></td></tr></table></figure><h3 id="相关过滤器功能"><a href="#相关过滤器功能" class="headerlink" title="相关过滤器功能"></a>相关过滤器功能</h3><ul><li>split，过滤器创建两个输入文件的拷贝并标记为[a],[b];</li><li>trim，修剪视频;</li><li>setpts=PTS-STARTPTS。重编码，算pts;</li></ul><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><img src="/2020/11/17/ffmpeg-add-opengl/p.png" alt></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="bbs.chinaffmpeg.com/forum.php?mod=viewthread&tid=391&extra=&page=3">Windows如何实现视频过渡滑入视频特效？</a></p><p><a href="https://www.cnblogs.com/nlsoft/p/10896543.html" target="_blank" rel="noopener">ffmpeg 视频过度滤镜 gltransition</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;先来看网上存在的一个&lt;code&gt;ffmpeg&lt;/code&gt;脚本&lt;/p&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="FFmpeg学习" scheme="https://octopuslian.github.io/categories/FFmpeg%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="FFmpeg" scheme="https://octopuslian.github.io/tags/FFmpeg/"/>
    
      <category term="OpenGL" scheme="https://octopuslian.github.io/tags/OpenGL/"/>
    
      <category term="视音频" scheme="https://octopuslian.github.io/tags/%E8%A7%86%E9%9F%B3%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg常用命令整理</title>
    <link href="https://octopuslian.github.io/2020/11/15/ffmpeg-command-finish/"/>
    <id>https://octopuslian.github.io/2020/11/15/ffmpeg-command-finish/</id>
    <published>2020-11-15T06:36:47.000Z</published>
    <updated>2020-11-18T14:01:00.061Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="检测源流信息"><a href="#检测源流信息" class="headerlink" title="检测源流信息"></a>检测源流信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 源流地址</span><br></pre></td></tr></table></figure><h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><h3 id="把A-MP4和B-mp4打包进同一个ts流，并推到本机的10003端口"><a href="#把A-MP4和B-mp4打包进同一个ts流，并推到本机的10003端口" class="headerlink" title="把A.MP4和B.mp4打包进同一个ts流，并推到本机的10003端口"></a>把A.MP4和B.mp4打包进同一个ts流，并推到本机的10003端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i A.mp4  -re -i B.mp4  -map 0:0 -map 0:1 -map 1:0 -map 1:1  -program program_num=1:title=videoA:st=0:st=1 -program program_num=3:title=videoB:st=2:st=3 -c copy -f mpegts udp://localhost:10003</span><br></pre></td></tr></table></figure><p>以此类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">推一路流</span><br><span class="line">ffmpeg -re -i A.mp4 -map 0:0 -map 0:1 -program program_num=1:title=videoA:st=0:st=1  -f mpegts udp://localhost:10003</span><br><span class="line"></span><br><span class="line">推三路流</span><br><span class="line">ffmpeg -re -i shenzhen.ts  -re -i guangdong.ts -re -i girl.mp4  -map 0:0 -map 0:1 -map 1:0 -map 1:1 -map 0:0 -map 0:1 -program program_num=1:title=videoA:st=0:st=1 -program program_num=3:title=videoB:st=2:st=3 -program program_num=5:title=videoXXX:st=4:st=5 -f mpegts udp://localhost:10003</span><br></pre></td></tr></table></figure><p>循环推一路流，不做编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -stream_loop -1 -i aaa.xx -c copy -f mpegts udp://localhost:10003</span><br></pre></td></tr></table></figure><h3 id="命令参数解释"><a href="#命令参数解释" class="headerlink" title="命令参数解释"></a>命令参数解释</h3><ul><li>re:realtime 推的速度，按当前帧率推</li><li>map 0:0 第一个流的视频</li><li>map 0:1 第一个流的音频</li><li>map 1:0 第二个流的视频</li><li>map 1:1 第二个流的音频</li><li>program_num=1:title=videoA:st=0:st=1 0,1合成一个视频videoA</li><li>program program_num=3:title=videoB:st=2:st=3 2,3合成一个视频videoB</li><li>-stream_loop 循环推流</li><li>-c copy 将视频中压缩的数据复制</li><li>-c:v libh264 将视频流强制转换为h264编码</li></ul><h2 id="查看流中的program信息"><a href="#查看流中的program信息" class="headerlink" title="查看流中的program信息"></a>查看流中的program信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -show_programs -print_format json -timeout 5000000 -i udp://localhost:10003</span><br></pre></td></tr></table></figure><ul><li>注意:这个命令有返回值，<code>0</code>表示执行成功，<code>1</code>表示失败。</li></ul><h2 id="将流中的program-1和program-3分别截取5s钟的时间，生成了两个文件"><a href="#将流中的program-1和program-3分别截取5s钟的时间，生成了两个文件" class="headerlink" title="将流中的program 1和program 3分别截取5s钟的时间，生成了两个文件"></a>将流中的program 1和program 3分别截取5s钟的时间，生成了两个文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -timeout 5000000 -i udp://localhost:10003  -t 0:0:5  -map p:1 -c copy  1.mp4 -t 0:0:5 -map p:3 -c copy 3.mp4</span><br></pre></td></tr></table></figure><ul><li>注意。此时推的是复合流。</li></ul><h2 id="对视频流抽帧"><a href="#对视频流抽帧" class="headerlink" title="对视频流抽帧"></a>对视频流抽帧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 源流地址 -vframes 1 -vf scale=90:51 图片存放路径</span><br></pre></td></tr></table></figure><h2 id="重复推流"><a href="#重复推流" class="headerlink" title="重复推流"></a>重复推流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -stream_loop -1 -i aaa.xx -c copy -f mpegts udp://localhost:10003</span><br><span class="line"></span><br><span class="line">./ffmpeg -re  -i -stream_loop -1 startslient.mp3  -c:a aac -f flv rtmp://123.56.17.184/live/znn</span><br></pre></td></tr></table></figure><h2 id="将流保存成文件"><a href="#将流保存成文件" class="headerlink" title="将流保存成文件"></a>将流保存成文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 流地址 -c copy 文件名</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">ffmpeg -i udp://localhost:10003 -c copy test.ts</span><br></pre></td></tr></table></figure><h2 id="检测源流中是否有静音"><a href="#检测源流中是否有静音" class="headerlink" title="检测源流中是否有静音"></a>检测源流中是否有静音</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i silence.mp3 -af silencedetect=noise=0.0001 -f null -</span><br><span class="line">(默认音频中如果有2秒是静音，就认为是有静音的)</span><br><span class="line"></span><br><span class="line">持续让ffmpeg检测音频5秒</span><br><span class="line">ffmpeg -i silence.mp3 -af silencedetect=noise=0.0001 -t 0:0:5 -f null -</span><br></pre></td></tr></table></figure><h2 id="切分视频片段"><a href="#切分视频片段" class="headerlink" title="切分视频片段"></a>切分视频片段</h2><h3 id="切分纯视频片段"><a href="#切分纯视频片段" class="headerlink" title="切分纯视频片段"></a>切分纯视频片段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.flv -vsync 0 -filter_complex &quot;[0:v]select=&apos;between(t-start_t,8.250,10.000)&apos;[xv];[xv]setpts=&apos;PTS-STARTPTS&apos;[vout];[vout]scale=1920:1080,pad=1920:1080:0:0:black[vout2]&quot; -map &quot;[vout2]&quot; -c:v libx264 test.ts</span><br></pre></td></tr></table></figure><h3 id="切分纯音频片段"><a href="#切分纯音频片段" class="headerlink" title="切分纯音频片段"></a>切分纯音频片段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.mp3 -filter_complex &quot;[0:a]aselect=&apos;between(t,0.000,26.250)&apos;[xa];[xa]asetpts=&apos;NB_CONSUMED_SAMPLES/SAMPLE_RATE*1/TB&apos;[aout] &quot; -map &quot;[aout]&quot; out.mp3</span><br></pre></td></tr></table></figure><h3 id="切分带音频的视频片段"><a href="#切分带音频的视频片段" class="headerlink" title="切分带音频的视频片段"></a>切分带音频的视频片段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.flv -filter_complex &quot;[0:v]select=&apos;between(t-start_t,5.250,10.000)&apos;[xv];[xv]setpts=&apos;PTS-STARTPTS&apos;[vout];[vout]scale=[vout2]&quot; -r 25 -map &quot;[vout2]&quot; -c:v libx264 -x264-params sps-id=6 out.ts</span><br></pre></td></tr></table></figure><h3 id="命令参数解释-1"><a href="#命令参数解释-1" class="headerlink" title="命令参数解释"></a>命令参数解释</h3><ul><li>-vsync 0：打印ffmpeg详细日志的开关</li><li>black：添加黑边</li><li>libx264：编码</li></ul><h2 id="合并视频片段"><a href="#合并视频片段" class="headerlink" title="合并视频片段"></a>合并视频片段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -safe 0 -i test.txt -c copy out.mp4</span><br></pre></td></tr></table></figure><ul><li>test.txt：一个文件列表，里面存放着要合并的视频片段名</li><li>-f concat -safe 0：打开文件时会用到</li></ul><h2 id="合并视频的同时添加图片和文字水印"><a href="#合并视频的同时添加图片和文字水印" class="headerlink" title="合并视频的同时添加图片和文字水印"></a>合并视频的同时添加图片和文字水印</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -safe 0 -i test.txt -t 27.040 -loop 1 -i 1080P%05d.png -filter_complex &quot;[0:v][1:v]overlay=x=0:y=885:enable=&apos;between(t,0,30)&apos;[out];[out]drawtext=fontfile=simhei.ttf:text=&apos;name&apos;:x=414:y=928:fontsize=60:fontcolor=white:enable=&apos;between(t,0,30)&apos;[out];[out]drawtext=fontfile=simhei.ttf:text=&apos;title&apos;:x=630:y=933:fontsize=52:fontcolor=white:enable=&apos;between(t,0,30)&apos;&quot; -y -c:v libx264 out.mp4</span><br></pre></td></tr></table></figure><ul><li>-loop 1，让png序列循环</li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://superuser.com/questions/1335639/how-can-i-overlay-png-image-sequence-but-start-at-particular-frame-using-ffmpeg" target="_blank" rel="noopener">how-can-i-overlay-png-image-sequence-but-start-at-particular-frame-using-ffmpeg</a></p><p><a href="https://blog.csdn.net/m0_37684310/article/details/78257779" target="_blank" rel="noopener">利用ffmpeg实现添加图片水印和文字水印，添加多个水印</a></p><p><a href="https://www.jianshu.com/p/c0e151775075" target="_blank" rel="noopener">使用ffmpeg给视频添加图片及文字水印</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;检测源流信息&quot;&gt;&lt;a href=&quot;#检测源流信息&quot; class=&quot;headerlink&quot; title=&quot;检测源流信息&quot;&gt;&lt;/a&gt;检测源流信息&lt;/h
      
    
    </summary>
    
    
      <category term="FFmpeg学习" scheme="https://octopuslian.github.io/categories/FFmpeg%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="FFmpeg" scheme="https://octopuslian.github.io/tags/FFmpeg/"/>
    
      <category term="视音频" scheme="https://octopuslian.github.io/tags/%E8%A7%86%E9%9F%B3%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>当我提完离职的时候</title>
    <link href="https://octopuslian.github.io/2020/11/09/when-i-mentioned-my-resignation/"/>
    <id>https://octopuslian.github.io/2020/11/09/when-i-mentioned-my-resignation/</id>
    <published>2020-11-09T13:54:47.000Z</published>
    <updated>2020-11-18T14:05:08.233Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>第一次提离职，难免有些紧张，当我梳理好离职的话语，按下回车的那一刻，仿佛世界一下就安静了。</p><p>这些天来我反复对比离职的利与弊，却往往忽略的最重要的一点————那就是我的内心所思所想。我当然想每个月看到自己有好几千的收入，但是为了这收入，我需要忍受，仿佛这些收入就是来慰藉我这个月的委屈。</p><p>接下来就是交接工作，希望早点完成然后搬新家开始我自己的计划。</p><p>朋友问我后面打算怎么办，我就说先把今年考研过了，然后回趟家陪陪父母，明年3月联系好友帮忙内推BAT等大厂，当然前提也要我自己做足准备才行。</p><p>从小学-初中-高中-大学，我慢慢发现我的人生轨迹就是一个<code>sin</code>函数，在某一阶段会跌入低谷，陷入迷茫，无法自拔，然后等过上2-4个月就如同凤凰涅槃一样重获新生。</p><p>加油，我的路还很长，但年轻的资本却只剩不多，我要将我有限的经历投入到有意义的事情中去。</p><p>GOOD LUCK !</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;第一次提离职，难免有些紧张，当我梳理好离职的话语，按下回车的那一刻，仿佛世界一下就安静了。&lt;/p&gt;&lt;p&gt;这些天来我反复对比离职的利与弊，却往往忽略的最重要的
      
    
    </summary>
    
    
      <category term="职场生涯" scheme="https://octopuslian.github.io/categories/%E8%81%8C%E5%9C%BA%E7%94%9F%E6%B6%AF/"/>
    
    
      <category term="职场" scheme="https://octopuslian.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="离职" scheme="https://octopuslian.github.io/tags/%E7%A6%BB%E8%81%8C/"/>
    
      <category term="心情" scheme="https://octopuslian.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>我的理想生活(1)</title>
    <link href="https://octopuslian.github.io/2020/10/21/my-dream-life-first/"/>
    <id>https://octopuslian.github.io/2020/10/21/my-dream-life-first/</id>
    <published>2020-10-21T14:52:52.000Z</published>
    <updated>2020-10-21T15:18:59.732Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>今天和@hanxu老友聊起以后想从事的工作，借此情形记录下来，不知未来十年或二十年可否实现。</p><p>我的理想生活，必须要自由，自由到不需要按时打卡上下班，不需要将自己的身躯固定在格子间里，不需要看某些人的脸色行事，不需要维持表面装出来的微笑表情，不需要整天盯着手机收发消息；</p><p>我的理想生活，必须要充实，充实到可以尽情做自己想做的事情，它带给我的快乐远远超过这件事的本身；</p><p>我的理想生活，必须要有它所存在的意义，而这样的意义我也在不停的寻找，六年的时间里，我放佛找到了些许轮廓：我可以尝试翻译国外的经典书籍，首先要要求自己的翻译水平达到一定的境界；我可以做多次不求回报的志愿者；我可以走遍千山万水，拍下别人只能在电视前看到的美景（比如抖音的<strong>韩船长</strong>）；</p><p>我的理想生活，必须要与美食同行，我要吃遍大江南北的特色小吃，品尝奇特的酸甜苦辣咸，就像生活的各种滋味一样；</p><p>我的理想生活，必须要见一见我的好兄弟们，和他们敞开心扉畅聊三天三夜，大口吃肉大口喝酒大声嚷嚷，因为我TM心里憋了一肚子气，已经太久没有大声说过话了…</p><p>我的理想生活，必须要去尝试极限运动，即使不小心发生了事故，我也无憾，因为我将长眠于我热爱的事业上，与其等着死，不如忙着生；</p><p>我的理想生活，必须要在离开这个世界之前，写出一本自传，告诉这个世界，我曾经来过，并带走了美好的回忆。</p><p>最后引用《死亡诗社》里的一首诗作为结束：</p><p><strong>我步入丛林</strong></p><p><strong>因为我希望活得随意</strong></p><p><strong>我希望活得深刻</strong></p><p><strong>吸取生命所有的精华</strong></p><p><strong>把非生命的一切都击溃</strong></p><p><strong>以免我在弥留之际</strong></p><p><strong>发现自己从未真正活过。</strong></p><p><img src="/2020/10/21/my-dream-life-first/1.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;今天和@hanxu老友聊起以后想从事的工作，借此情形记录下来，不知未来十年或二十年可否实现。&lt;/p&gt;&lt;p&gt;我的理想生活，必须要自由，自由到不需要按时打卡上下
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="https://octopuslian.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="梦想" scheme="https://octopuslian.github.io/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>爱笑的眼睛</title>
    <link href="https://octopuslian.github.io/2020/10/20/smiling-eyes/"/>
    <id>https://octopuslian.github.io/2020/10/20/smiling-eyes/</id>
    <published>2020-10-20T15:17:36.000Z</published>
    <updated>2020-10-21T14:53:33.400Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>“离开你我才发现自己，那爱笑的眼睛，流过泪，像躲不过的暴风雨….” ————林俊杰《爱笑的眼睛》</p><h2 id="离开学校"><a href="#离开学校" class="headerlink" title="离开学校"></a>离开学校</h2><p>虽然离开学校已经两年了，但我偶尔还是会规划自己的暑假生活，想着7月去哪玩，8月去吃什么…等等，我不能做梦了，我已经没有寒暑假，oh shit !</p><p>我时常还是怀念上学的时光，没有人打扰的实验室 &amp; 图书馆四楼的计算机专业书架和三楼的文学小说书架 &amp; 800一年的宿舍和食堂5元的两荤一素一汤 &amp; 良师益友…</p><h2 id="离开家人"><a href="#离开家人" class="headerlink" title="离开家人"></a>离开家人</h2><p>远离故乡，远离家人，来到一座陌生的城市求职生存，我突然算了下，从大学到现在六年时间里，我们相处的时间竟然不足100天。</p><p>我时常想念母亲做的新疆拌面和岐山臊子面，父亲做的红烧肉和手抓饭，和妹妹抢电脑打拳皇，经常2:3她赢，殊不知其实是我故意摁错了几个发绝招的键位，哈哈哈…</p><h2 id="离开家乡"><a href="#离开家乡" class="headerlink" title="离开家乡"></a>离开家乡</h2><p>有得必有失，有舍必有得，这是我小时候时常听到的一句话。</p><p>我失去了熟悉的环境，失去了和父母相处的日子，失去了学校安逸的时光，换来了两年时间的反思和顿悟，以及见识了最真实的自己。</p><h2 id="你有没有自己的忍道？"><a href="#你有没有自己的忍道？" class="headerlink" title="你有没有自己的忍道？"></a>你有没有自己的忍道？</h2><p>我时常回忆起《火影忍者》里的李洛克和旋涡鸣人的场景，为了贯彻自己的忍道，李洛克开了八门遁甲，鸣人不断学习忍术和挨打，最终李洛克得到老师认可，鸣人当上火影。有时我在想，这样的场景我可以复现吗？</p><h2 id="那爱笑的眼睛"><a href="#那爱笑的眼睛" class="headerlink" title="那爱笑的眼睛"></a>那爱笑的眼睛</h2><p>眼睛是心灵的窗户，我喜欢正视对方的眼睛，因为可以发现很多内在不易表现的东西。</p><p>而我也喜欢对着镜子看自己，有时看到乐观和坚毅，有时看到伤感和迷茫，也许这才是真实的我，热泪与梦想交织，在希望和失望，在迷茫和坚定自己的过程中，螺旋式缓慢成长。</p><p><strong>离开你我才找回自己，那爱笑的眼睛，再见到你，我一定让自己假装很坚定。</strong></p><p><img src="/2020/10/20/smiling-eyes/1.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;“离开你我才发现自己，那爱笑的眼睛，流过泪，像躲不过的暴风雨….” ————林俊杰《爱笑的眼睛》&lt;/p&gt;&lt;h2 id=&quot;离开学校&quot;&gt;&lt;a href=&quot;#离开
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="成长" scheme="https://octopuslian.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>没有Bug的项目</title>
    <link href="https://octopuslian.github.io/2020/10/20/no-bug-project/"/>
    <id>https://octopuslian.github.io/2020/10/20/no-bug-project/</id>
    <published>2020-10-20T14:49:11.000Z</published>
    <updated>2020-10-21T14:53:42.987Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>这个世界上，永远不存在——没有Bug的项目。</p><p>从2019年开始至今，在一个项目上做了快一年了，<strong>永远不存在——没有Bug的项目</strong>，这是我最终顿悟的。</p><p>从最初的服务架构设计-&gt;编码-&gt;调试-&gt;单元测试-&gt;联调测试-&gt;加大压力测试-&gt;改Bug-&gt;改需求-&gt;改代码-&gt;继续测试，不断循环往复，像一个永远不会<code>break</code>的循环语句，我慢慢体会到了时间流逝的太快，不知不觉我已经是一个工作经验有两年的职场人了。</p><p>这两年带给我最大的变化就是来自心态的变化，我仍记得我初入公司时，那种兴奋和好奇占据了我的灵魂，什么都想做，什么都想尝试，到慢慢的这具皮囊被迷茫和空虚所填满。</p><p>我一直想写出一个没有Bug的项目，然而当我发现，原来曾经的功能可以转化为现在的错误的时候，那么剩下我所做的一切都不重要了。</p><p>这个世界上，永远不存在没有Bug的项目，除非————我可以和这个项目永久地切断联系！</p><p><img src="/2020/10/20/no-bug-project/1.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;这个世界上，永远不存在——没有Bug的项目。&lt;/p&gt;&lt;p&gt;从2019年开始至今，在一个项目上做了快一年了，&lt;strong&gt;永远不存在——没有Bug的项目&lt;/
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="项目" scheme="https://octopuslian.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="职场" scheme="https://octopuslian.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="Bug" scheme="https://octopuslian.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Cooking_新疆手抓饭</title>
    <link href="https://octopuslian.github.io/2020/10/19/cooking-xin-jiang-shou-zhua-fan/"/>
    <id>https://octopuslian.github.io/2020/10/19/cooking-xin-jiang-shou-zhua-fan/</id>
    <published>2020-10-19T00:28:32.000Z</published>
    <updated>2020-10-27T00:35:20.355Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>国庆期间去了一家新疆人开的新疆饭馆吃抓饭，一点也不正宗，尽是米饭，还是自己动手丰衣足食。</p><h2 id="准备食材"><a href="#准备食材" class="headerlink" title="准备食材"></a>准备食材</h2><p>红萝卜两根，（皮牙子）洋葱一个，鸡翅根７-８个，盛一碗米饭泡着。</p><p>红萝卜切成条，洋葱切成片，鸡肉切成块。</p><h2 id="开炒"><a href="#开炒" class="headerlink" title="开炒"></a>开炒</h2><p>倒入油，倒多一些，放入鸡肉翻炒，加盐一勺，加花椒粉一勺，加孜然粉一勺，肉炒3-5分钟后加入洋葱和胡萝卜，加盐两勺，翻炒至7-8分熟关火，将炒好的菜倒入电饭煲中。</p><p><img src="/2020/10/19/cooking-xin-jiang-shou-zhua-fan/1.jpg" alt></p><h2 id="蒸饭"><a href="#蒸饭" class="headerlink" title="蒸饭"></a>蒸饭</h2><p>倒入米粉，加水，合上电饭锅，开始蒸，等结束后开锅加入鸡精再翻一下。</p><p><img src="/2020/10/19/cooking-xin-jiang-shou-zhua-fan/2.jpg" alt></p><h2 id="出锅"><a href="#出锅" class="headerlink" title="出锅"></a>出锅</h2><p><img src="/2020/10/19/cooking-xin-jiang-shou-zhua-fan/3.jpg" alt></p><h2 id="2020-10-25更新"><a href="#2020-10-25更新" class="headerlink" title="2020-10-25更新"></a>2020-10-25更新</h2><ul><li>一定要在蒸饭前多加盐，不然吃起来真的没味道。</li><li>水放适中即可，不要放太多，不然出锅就容易粘，可以出锅前先焖一会。</li></ul><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;国庆期间去了一家新疆人开的新疆饭馆吃抓饭，一点也不正宗，尽是米饭，还是自己动手丰衣足食。&lt;/p&gt;&lt;h2 id=&quot;准备食材&quot;&gt;&lt;a href=&quot;#准备食材&quot; 
      
    
    </summary>
    
    
      <category term="厨艺学习" scheme="https://octopuslian.github.io/categories/%E5%8E%A8%E8%89%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="厨艺" scheme="https://octopuslian.github.io/tags/%E5%8E%A8%E8%89%BA/"/>
    
      <category term="大盘鸡" scheme="https://octopuslian.github.io/tags/%E5%A4%A7%E7%9B%98%E9%B8%A1/"/>
    
      <category term="新疆" scheme="https://octopuslian.github.io/tags/%E6%96%B0%E7%96%86/"/>
    
  </entry>
  
  <entry>
    <title>Kindle下载电子书的方法</title>
    <link href="https://octopuslian.github.io/2020/10/19/kindle-download-books-usage/"/>
    <id>https://octopuslian.github.io/2020/10/19/kindle-download-books-usage/</id>
    <published>2020-10-19T00:22:10.000Z</published>
    <updated>2020-11-03T13:25:34.961Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>周末尝试下载书籍的方法，在此做一整理：</p><h2 id="方法一，在亚马逊商城下载"><a href="#方法一，在亚马逊商城下载" class="headerlink" title="方法一，在亚马逊商城下载"></a>方法一，在亚马逊商城下载</h2><p>只要kindle绑定了亚马逊账号，在亚马逊购买的书籍就可以在kindle上阅读。</p><h2 id="方法二，用数据线"><a href="#方法二，用数据线" class="headerlink" title="方法二，用数据线"></a>方法二，用数据线</h2><p>用和kindle匹配的数据线连接到电脑上，然后将电子书拖到kindle的文件盘里。</p><p>但是需要注意，kindle连电脑完全看数据线心情。</p><h2 id="方法三，（推荐）用邮箱推送"><a href="#方法三，（推荐）用邮箱推送" class="headerlink" title="方法三，（推荐）用邮箱推送"></a>方法三，（推荐）用邮箱推送</h2><ul><li>先登录亚马逊官方账号，在我的设备里找到一个***kindle.cn的邮箱地址，复制下来；</li><li>在设置里将自己的邮箱，比如我的***.@qq.com设置为可以信任的邮箱；</li><li>打开邮件发送页面，将要下载的书籍添加到邮件附件里，点击发送，然后kindle连上wifi，一分钟左右新的书籍就出来了。</li></ul><p><a href="https://jingyan.baidu.com/article/656db918c1f032e381249c16.html" target="_blank" rel="noopener">Kindle 推送教程：教你用电子邮箱推送电子书</a><br><a href="https://jingyan.baidu.com/article/656db918b2cf47a281249cee.html" target="_blank" rel="noopener">Kindle如何添加认可的发件人电子邮箱？</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;周末尝试下载书籍的方法，在此做一整理：&lt;/p&gt;&lt;h2 id=&quot;方法一，在亚马逊商城下载&quot;&gt;&lt;a href=&quot;#方法一，在亚马逊商城下载&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="下载书籍" scheme="https://octopuslian.github.io/tags/%E4%B8%8B%E8%BD%BD%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="kindle" scheme="https://octopuslian.github.io/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-1512 number of good pairs | 好数对的数目</title>
    <link href="https://octopuslian.github.io/2020/10/05/Leetcode-1512-number-of-good-pairs/"/>
    <id>https://octopuslian.github.io/2020/10/05/Leetcode-1512-number-of-good-pairs/</id>
    <published>2020-10-05T00:32:52.000Z</published>
    <updated>2020-10-05T00:36:37.700Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/number-of-good-pairs/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-good-pairs/</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一，暴力法"><a href="#方法一，暴力法" class="headerlink" title="方法一，暴力法"></a>方法一，暴力法</h3><p>先声明一个计数值<code>count</code>作为返回的结果，然后从数组下标０开始，挨个遍历下标０之后的值，接着做判断，如果两个值相等就将<code>count</code>加１，否则继续循环，直到结束返回<code>count</code>值即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numIdenticalPairs</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">//暴力法</span></span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,x := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>;j &lt; <span class="built_in">len</span>(nums);j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> x == nums[j] &#123;</span><br><span class="line">                count++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://octopuslian.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="暴力求解" scheme="https://octopuslian.github.io/tags/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_771_jewels_and_stones | 宝石与石头</title>
    <link href="https://octopuslian.github.io/2020/10/02/Leetcode-771-jewels-and-stones/"/>
    <id>https://octopuslian.github.io/2020/10/02/Leetcode-771-jewels-and-stones/</id>
    <published>2020-10-02T03:16:21.000Z</published>
    <updated>2020-10-02T03:26:24.663Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/jewels-and-stones/" target="_blank" rel="noopener">jewels-and-stones</a></p><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>两个<code>for</code>循环，暴力求解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numJewelsInStones</span><span class="params">(J <span class="keyword">string</span>, S <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,s := <span class="keyword">range</span> S &#123;</span><br><span class="line">        <span class="keyword">for</span> _,j := <span class="keyword">range</span> J &#123;</span><br><span class="line">            <span class="keyword">if</span> s == j &#123;</span><br><span class="line">                count++</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>一个<code>for</code>循环和一个<code>map</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numJewelsInStones</span><span class="params">(J <span class="keyword">string</span>, S <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    jewels := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">for</span> _, j := <span class="keyword">range</span> J &#123;</span><br><span class="line">        jewels[j] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> S &#123;</span><br><span class="line">        <span class="keyword">if</span> jewels[s] &#123;</span><br><span class="line">            count ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://octopuslian.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="循环" scheme="https://octopuslian.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="哈希表" scheme="https://octopuslian.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何决断一家公司是否值得去为之工作</title>
    <link href="https://octopuslian.github.io/2020/09/09/how-to-decide-whether-a-company-is-worth-going-to-work/"/>
    <id>https://octopuslian.github.io/2020/09/09/how-to-decide-whether-a-company-is-worth-going-to-work/</id>
    <published>2020-09-09T13:45:11.000Z</published>
    <updated>2020-09-09T14:10:26.067Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>昨天下午，我意外在朋友圈看到一位之前在上海EA做图形渲染的前辈，跳槽去了一家创业公司——鹰角网络，出于好奇，我询问其跳槽的原因，以下内容采取对话形式展开：</p><p>————————————————————————————————————————————————————————————————————————————</p><p>Q：hello，老哥，您是从EA直接跳过去的吗？我有接到猎头邀请，问我是否考虑上海EA。<br>A：是的，EA挺好的，很正规。</p><p>Q：是什么原因去跳槽呢？<br>A：待遇更好，鹰角的产品已经做起来了，并且在扩张阶段。相比上海EA，鹰角产品更挣钱，也更肯投钱在员工身上。</p><p>Q：讲真我还没听过过这家公司，不过我看鹰角公司主页，说是大部分来自谷歌、无极黑的员工，所以我想看一家公司是否值得去，肯定有它的闪光点，耀眼到超过自己当前岗位的价值和意义。<br>A：《明日方舟》可以了解下，从趋利的角度讲，明日方舟首月5亿流水，现在差不多每月1亿，而之前在EA的项目每月1千万，并且腾讯拿大头。还有员工培训这点，今年的UWA开发者大会，鹰角买了20多张票给员工去参加，EA一般每年1-2张，今年1张，当然这也和EA主要用自研引擎有关。但其实EA也有的，比如买GDC各种视频，就是离用到生产还有点距离。</p><p>Q：怎么判断公司是否值得去呢？<br>A：待遇、项目、技术力、宣发能力，大致这些。</p><p>————————————————————————————————————————————————————————————————————————————</p><p>和他沟通完后，我陷入了沉思，突然想起我以前在一家上市游戏公司的时候，我旁边工位一位做客户端的同事，为了学习渲染，将一本厚厚的只有英文版的书籍打印下来看，领导看到后非但没有生气，反而对着全工作室人说谁能看完这本书奖励money，各种下午茶、比赛、讲座纷至沓来…。</p><p>然而我目前在另外一家公司所做的事，就只是简单的维护已有的业务逻辑，增删改查，沟通&gt;技术，没有任何成就感，各种无聊的需求以及奇葩的规定，让我逐渐麻木。</p><p>但是这位前辈提到的建议还是非常实用的，对我未来的职业规划起到一定的作用。</p><p>待遇占第一位，毕竟这是生存之根本；项目+技术力，这是历练和提升实力的关键；员工培养机制，这是发展前景的保障；节日礼物和福利，这是人情温暖的一大体现。</p><p><strong>我还年轻，还有更多的时间和机会找到自己喜欢做的事，希望那一天不会让我等太久。</strong></p><p><img src="/2020/09/09/how-to-decide-whether-a-company-is-worth-going-to-work/wait.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;昨天下午，我意外在朋友圈看到一位之前在上海EA做图形渲染的前辈，跳槽去了一家创业公司——鹰角网络，出于好奇，我询问其跳槽的原因，以下内容采取对话形式展开：&lt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="上班" scheme="https://octopuslian.github.io/tags/%E4%B8%8A%E7%8F%AD/"/>
    
      <category term="选择" scheme="https://octopuslian.github.io/tags/%E9%80%89%E6%8B%A9/"/>
    
      <category term="价值" scheme="https://octopuslian.github.io/tags/%E4%BB%B7%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>国人皆如此，倭寇何敢</title>
    <link href="https://octopuslian.github.io/2020/08/21/every-chinese-like-this-how-dare-the-japanese-pirates/"/>
    <id>https://octopuslian.github.io/2020/08/21/every-chinese-like-this-how-dare-the-japanese-pirates/</id>
    <published>2020-08-21T14:16:07.000Z</published>
    <updated>2020-08-22T05:17:50.799Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>今天我看完了《八佰》这部抗日电影，感触很深，在此记录我的一些心理感受。</p><p>印象最深的是国军和日军打到白热化阶段时，日军的凿墙部队顶着钢板，扔手榴弹被弹开，中国军人不得不身体绑上炸弹，跳下去和日军同归于尽。这与《金陵十三钗》里中国军人以人数排成一列无限接近装甲车上让最后一个士兵在死前滚到装甲车的车轮子底下炸毁装甲车方法类似。</p><p>我庆幸我活在一个和平的年代，没有战争，父母健在，按时上下班。然而，屈辱的历史不应该被遗忘。</p><p>我记得我有个同事，去年去日本旅游，当地的日本人扔背地里叫他“支那人”，即使没有被叫成“支那猪”，但听着仍然叫人很不爽。区区的弹丸之国，还没有中国一个省大，为什么能如此嚣张？我想这部电影貌似已经告诉了我们答案。</p><p>这部电影的另一个我喜欢的点就是真实，越长大越想看到真实。</p><p>当如今被日本当做喜剧片的抗日神剧层出不穷，比如手撕鬼子，机枪打掉轰炸机，一箭射穿五个人，让我们这代是否产生了错觉，认为当年的日军是连滚带爬逃出中国的呢？事实并非如此，在对方装备先进，武士道精神（不知道是不是这个，反正就是类似天皇的意志在支配）的支配下，我军只能以人数去怼。我想这或许才是真实的战争。</p><p>另外我不明白为什么有人总是带着有色眼睛来看这部电影，比如煽情，在我看来它真实表现了当时军队的想法。活着的怕死，伤的动弹不得的想给个痛快。这部电影节奏很快，尤其是打仗，哪里有缺口就需要赶紧补上，当补不上的时候，只有有命去补，但当你准备牺牲自己的生命时，你是否想到家里正在盼儿归来的父母，是否想到自己的妻子和孩子，然而你知道希望渺茫，只能对天嘶吼一声：“娘，俺走了，儿不孝！” 如果我在十楼往下跳，我想我会让时间过得慢一些，多说几句话。</p><p>电影的最后，大家知道再对抗下去全都得死，于是往英租区跑，能活一个是一个，在这里也有鲜明的对比，比如刚开始四行仓库打仗，对面人就跟看热闹似的——哇哦，好大的舞台，那里竟然死了人。到最后，民族觉醒，送吃的，送喝的，实在不行打上两枪也行。连英国人都忍不住开始补抢——他妈的日本人，去死吧。</p><p>当然，现在是和平年代，不打仗，都是经济战和人才战，但我们不应该忘记历史。我希望在我有生之年，可以看到我们中国人走出国门时，都是被人尊敬的，而不是听到“那里来了一个支那人”。</p><p>国人皆如此，倭寇何敢。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;今天我看完了《八佰》这部抗日电影，感触很深，在此记录我的一些心理感受。&lt;/p&gt;&lt;p&gt;印象最深的是国军和日军打到白热化阶段时，日军的凿墙部队顶着钢板，扔手榴弹
      
    
    </summary>
    
    
      <category term="影评" scheme="https://octopuslian.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="八佰" scheme="https://octopuslian.github.io/tags/%E5%85%AB%E4%BD%B0/"/>
    
  </entry>
  
  <entry>
    <title>幻光</title>
    <link href="https://octopuslian.github.io/2020/08/09/phantom-light/"/>
    <id>https://octopuslian.github.io/2020/08/09/phantom-light/</id>
    <published>2020-08-09T14:46:50.000Z</published>
    <updated>2020-08-09T15:07:14.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>曾经我以为所有的生命都是被束缚的</p><p>只有终结才是自由的开始</p><p>可明明不想死</p><p>却没有活下去的理由</p><p>明明很想活着</p><p>却害怕活着的感觉</p><p>也许成为光照亮别人只是她跟我开的一个玩笑</p><p>你越想去忘记一切</p><p>却反而记得更清楚</p><p>那时的我是那么孤独又毫无价值</p><p>死对我来说</p><p>是那么的黑暗</p><p>又让人害怕</p><p>也许</p><p>有时帮你解开枷锁的并不是希望</p><p>也许绝望的尽头才是真正的新生</p><p>后来 我终于来到世界尽头</p><p>那里是最后一个光点</p><p>再过去就是深渊</p><p>它像一面镜子</p><p>我看到镜中的自己化为恶龙</p><p>纵然一切都是骗局</p><p>但我知道</p><p>凝视深渊</p><p>深渊必将回应凝视</p><p>谁也无法看到最初的世界</p><p>而真正的先知早就给特殊的灵魂准备了下达深远的梯子</p><p>是否 只有变成怪物，才能战胜怪物</p><p>是否 只有抛弃“我”才能变成光</p><p>只有活下去</p><p>才能知道答案</p><p>无论人们怎么变坏</p><p>世界都会照常运行</p><p>罪魁祸首玩弄着为希望献身的人们</p><p>一心只想冲破黑暗</p><p>却不知这一切 皆是枉然</p><p>无论弱者 如何哀叹鄙夷自己的软弱</p><p>终究无法逃离 悲惨的末路</p><p>没有人生来就拥有自由</p><p>假如无法挣脱</p><p>那就毁灭吧！</p><p>毁灭束缚你的一切</p><p>所有人都对黑暗的未来心存恐惧</p><p>但不到那一刻 又如何能知道</p><p>生也是“我”</p><p>死也是“我”</p><p>彻悟是“我”</p><p>答案是“我”</p><p>“我”才是救赎</p><p>“我”即是毁灭！</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;曾经我以为所有的生命都是被束缚的&lt;/p&gt;&lt;p&gt;只有终结才是自由的开始&lt;/p&gt;&lt;p&gt;可明明不想死&lt;/p&gt;&lt;p&gt;却没有活下去的理由&lt;/p&gt;&lt;p&gt;明明很想活着&lt;/
      
    
    </summary>
    
    
      <category term="影评" scheme="https://octopuslian.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="疯味英雄" scheme="https://octopuslian.github.io/tags/%E7%96%AF%E5%91%B3%E8%8B%B1%E9%9B%84/"/>
    
  </entry>
  
  <entry>
    <title>由FFmpeg合成视频静帧引发的协程未关闭的解决方案</title>
    <link href="https://octopuslian.github.io/2020/08/04/golang-merge-video-still-frame/"/>
    <id>https://octopuslian.github.io/2020/08/04/golang-merge-video-still-frame/</id>
    <published>2020-08-04T11:46:29.000Z</published>
    <updated>2020-08-04T12:27:49.987Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="产生静帧的原因"><a href="#产生静帧的原因" class="headerlink" title="产生静帧的原因"></a>产生静帧的原因</h2><p>视频的长度比音频短 ——&gt; 为什么视频短？ ——&gt; 1，外部给的数据就少；2，内部合成的问题。</p><p>本文主要对7月底出现的一次静帧bug做详细的分析和给出的解决方案。</p><h2 id="回顾整个任务流程"><a href="#回顾整个任务流程" class="headerlink" title="回顾整个任务流程"></a>回顾整个任务流程</h2><ul><li>开始任务：上层服务通知开始做任务时，我根据数据合成最终视频后，通过<code>Redis</code>数据库告知上层服务我已经做完任务了。</li><li>结束任务：上层服务发送结束任务时，我立刻停掉所有正在进行的协程。</li></ul><h2 id="问题溯源"><a href="#问题溯源" class="headerlink" title="问题溯源"></a>问题溯源</h2><p>首先，我通过看日志发现：上层服务只调用了一次开始任务的请求，但我这里却<strong>重复做了任务</strong>，也就是一个人做了两次任务。</p><p>为什么呢？于是我根据日志查到源头，发现是这个循环检测<code>redis key</code>出了问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis_value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">redis_value, _ = redis.String(c.Do(<span class="string">"GET"</span>, redis_key))</span><br><span class="line"></span><br><span class="line">Log.Info(GoID+<span class="string">": get redis value is: "</span>, redis_value)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(redis_value) == <span class="number">0</span> &#123;</span><br><span class="line">time.Sleep(time.Duration(<span class="number">15</span>) * time.Second)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">var</span> filelist FileList</span><br><span class="line">Unerr := json.Unmarshal([]<span class="keyword">byte</span>(redis_value), &amp;filelist)</span><br><span class="line"><span class="keyword">if</span> Unerr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">           Log.Info(GoID+<span class="string">": unmarshal filelist: "</span>, filelist)</span><br><span class="line">           </span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而本地测试后发现没问题，那么问题出在哪里呢？</p><p>后来我又看了日志，发现两个任务发的时间间隔很短，会不会是任务重了，导致同一个人开了两个协程，协程1在检测协程2已经生成的视频文件，结果视频还没有生成完，就送去做转场合成，导致最终的视频过短，从而产生静帧？</p><p>经过和上层服务的负责人沟通，确认他当时发第一次任务后忘记停止任务了，导致发第二次任务时，第一次任务还在循环检测<code>redis key</code>，最终两个任务一起做了。</p><p>于是他改了下代码，重新测试，但是问题还存在，这次主要集中在我这里，因为我发现<strong>即使上层服务发送了停止任务的请求，但我这里还是有协程在做检测redis key的活</strong>，所以最终问题确认为————发送了停止任务后，我这里没有及时关闭掉协程。</p><p>修改代码，使用<code>sync.WaitGroup</code>控制协程的数量：</p><p>person.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wg := sync.WaitGroup&#123;&#125;  <span class="comment">//很重要</span></span><br><span class="line"></span><br><span class="line">stopdone := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   StopTaskChannelMapOp(taskid, <span class="string">"set"</span>, stopdone)</span><br><span class="line">   <span class="keyword">for</span> _, person := <span class="keyword">range</span> personredis &#123;</span><br><span class="line">   <span class="keyword">go</span> Task(stopdone,wg)  </span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-stopdone:</span><br><span class="line">Log.Info(<span class="string">"Stop Task"</span>, taskid)</span><br><span class="line">StopTaskChannelMapOp(taskid, <span class="string">"delete"</span>, stopdone)</span><br><span class="line"></span><br><span class="line">wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">           &#125;()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>task.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Task</span><span class="params">(stop <span class="keyword">chan</span> <span class="keyword">bool</span>,wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)  <span class="comment">//很重要</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()  <span class="comment">//很重要</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> redis_value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    t := time.NewTicker(<span class="number">15</span> * time.Second)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">redis_value, _ = redis.String(c.Do(<span class="string">"GET"</span>, redis_key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(redis_value) == <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-stop:</span><br><span class="line">            <span class="comment">//收到停止任务的请求后，直接结束这个协程</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> &lt;-t.C:</span><br><span class="line">            <span class="comment">//睡15s后继续检测redis key</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//unmarshal redis value</span></span><br><span class="line"><span class="keyword">var</span> filelist FileList</span><br><span class="line">Unerr := json.Unmarshal([]<span class="keyword">byte</span>(redis_value), &amp;filelist)</span><br><span class="line"><span class="keyword">if</span> Unerr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Log.Info(GoID+<span class="string">": unmarshal filelist: "</span>, filelist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，收到停止任务后即可结束正在做任务的协程。</p><h2 id="个人理解的sync-WaitGroup的用法"><a href="#个人理解的sync-WaitGroup的用法" class="headerlink" title="个人理解的sync.WaitGroup的用法"></a>个人理解的sync.WaitGroup的用法</h2><p>专业解释可以看官方文档或文章底部的参考资料，在此仅仅对我目前所用的<code>WaitGroup</code>做简单的理解，如有误差请及时提出来我好补充，感谢。</p><p><code>WaitGroup</code>就像是一个计数器，开一个协程，<code>Add</code>就会让计数器加1，当协程运行完或中间退出时，<code>Done</code>就会减1，但当你开了很多协程，但又不知道什么时候协程会全部结束时，就需要<code>Wait</code>等待所有协程结束。</p><p>而对于一些必须要及时退出协程的情况（比如我上述锁描述的情况），就需要用<code>channel</code>通知协程关闭，所以一定要在所有协程可能会退出的情况记得<code>Done</code>，或者使用<code>defer wg.Done</code>，否则<code>WaitGroup</code>这个“计数器”不为1，它就会一直卡住。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>遇到问题多想，多测试，多看日志，多分析；</li><li>实在找不到问题，可以和相关的负责人员沟通，一起寻找突破口；</li><li>一定要找到问题的本质，从根源解决，不要想着用一个应急方案先凑活，不然你会发现你的职业生涯就一直在和这类业务问题做斗争；</li><li><code>sync.WaitGroup</code>是让协程优雅退出的一种解决方式，那么是否还有其他让协程退出的方法呢？</li><li>所有看似匪夷所思的<code>Bug</code>，背后一定绕不开它的基础原理；</li><li>最后感谢部门同事@yangfengyu和@chenhan的帮助，让我有<code>get</code>了一个新技能。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/79d27f200bcf" target="_blank" rel="noopener">简书_Golang并发：并发协程的优雅退出</a><br><a href="https://zhuanlan.zhihu.com/p/75441551" target="_blank" rel="noopener">你真的会用sync.WaitGroup吗</a><br><a href="https://www.dyxmq.cn/program/code/golang/waitgroup-in-golang.html" target="_blank" rel="noopener">起风了_Golang等待组sync.WaitGroup的用法</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;产生静帧的原因&quot;&gt;&lt;a href=&quot;#产生静帧的原因&quot; class=&quot;headerlink&quot; title=&quot;产生静帧的原因&quot;&gt;&lt;/a&gt;产生静帧的原
      
    
    </summary>
    
    
      <category term="解决方案记录" scheme="https://octopuslian.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
      <category term="协程" scheme="https://octopuslian.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="WaitGroup" scheme="https://octopuslian.github.io/tags/WaitGroup/"/>
    
      <category term="并发" scheme="https://octopuslian.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-392-is-subsequence | 判断子序列</title>
    <link href="https://octopuslian.github.io/2020/07/31/Leetcode-392-is-subsequence/"/>
    <id>https://octopuslian.github.io/2020/07/31/Leetcode-392-is-subsequence/</id>
    <published>2020-07-31T00:42:20.000Z</published>
    <updated>2020-10-02T03:19:18.505Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">leetcode中国</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>Golang</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubsequence</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    n, m := <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)  </span><br><span class="line">    i, j := <span class="number">0</span>, <span class="number">0</span> <span class="comment">//初始化两个指针i,j分别指向s和t初始化的位置</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; n &amp;&amp; j &lt; m &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == t[j] &#123;</span><br><span class="line">            i++  <span class="comment">//匹配成功，则i,j同时右移</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++  <span class="comment">//匹配失败，则j右移，i不变</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i == n  <span class="comment">//最终如果i移动到s的末尾，就说明s是t的子序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://octopuslian.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>妹妹的中考</title>
    <link href="https://octopuslian.github.io/2020/07/30/sister-zhong-kao/"/>
    <id>https://octopuslian.github.io/2020/07/30/sister-zhong-kao/</id>
    <published>2020-07-30T00:21:23.000Z</published>
    <updated>2020-07-30T00:51:48.639Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p>这两周一直在忙妹妹的中考，这个月底总算尘埃落定。</p><p>由于今年疫情原因，取消中考体育，所以总分只有750分，妹妹说她考了670分，全市排名1700左右，我觉得可以冲下排名第二、三，保底是排名第四和第五的学校。</p><p>然而最终录取分数线出来后，排名第三的乌鲁木齐市八一中学分数线比妹妹的成绩高了5分，最终被排名第四的乌鲁木齐市八中录取了。</p><p>父母觉得有些遗憾，但只能接受，好在乌鲁木齐市八中也离家比较近，耗时近两周的中考录取终于结束了。</p><p>然而，我突然回想起我的中考，跌跌撞撞中被乌鲁木齐市高级中学实验班录取，巨大的校园和先进的设备吸引了我，还有各种兴趣小组可以参加，邻居们之前还对我家不屑一顾，突然听说我考到了乌鲁木齐市高级中学的时候，羡慕、嫉妒纷至沓来。从那时起我突然明白，原来好学校有时候就像一种荣誉的象征，不光是给自己争气，也是给父母脸上增光。</p><p>时隔多年，我依然庆幸，在高中里遇到的良师益友，影响了我的高考乃至大学生涯。</p><p>中考差5分也算是一次警醒，希望妹妹可以在乌鲁木齐市八中里茁壮成长，期待三年后的高考，也能取得一个满意的结果。</p><p><img src="/2020/07/30/sister-zhong-kao/light.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;这两周一直在忙妹妹的中考，这个月底总算尘埃落定。&lt;/p&gt;&lt;p&gt;由于今年疫情原因，取消中考体育，所以总分只有750分，妹妹说她考了670分，全市排名1700左
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="中考" scheme="https://octopuslian.github.io/tags/%E4%B8%AD%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>以五十步笑百步，则何如？</title>
    <link href="https://octopuslian.github.io/2020/07/26/how-wu-shi-bu-xiao-bai-bu/"/>
    <id>https://octopuslian.github.io/2020/07/26/how-wu-shi-bu-xiao-bai-bu/</id>
    <published>2020-07-26T02:24:30.000Z</published>
    <updated>2020-07-30T00:48:45.983Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --><p><strong>以五十步笑百步，则何如？</strong>——出自《孟子•梁惠王上》：孟子对曰：“王好战，请以战喻。填然鼓之。兵刃既接，弃甲曳兵而走。或百步而后止，或五十步而后止。以五十步笑百步，则何如？”曰：“不可。直不百步耳，是亦走也。”</p><p>为什么我会突然想起这段对话呢，源于前几个月发生的一起事情。</p><p>我记得当时在吃午饭，同事A突然觉得找不到什么新鲜话题了，对同事B说，坐你之前座位的同事C，写代码真是烂的一批，写的程序经常出错叫别人来解决，有一次出现的问题是他传输一个数据给另一个服务，结果还没传输到就没了，一直找不到原因，结果同事A看了同事C的代码后，说你还没将数据传到另一端的时候自己主动释放掉了。听完同事B哈哈大笑，笑的没玩没了，吃完饭的时候在电梯里又再笑个不停。我在想至于吗？大家都是搬砖的，无非就是你搬砖快一些，人家搬砖慢一些，没必要一直嘲笑吧？！</p><p>结果过了一段时间，同事A和同事B在业务上有合作，然而同事A那边测试总是出问题，找同事B来讨论原因，结果同事A大怒，说你自己写的东西不测试一下的吗？我用的是你封装好的接口，我这边要测试的话也不清楚你写的程序到底有没有出问题，结果你都不测试以下就提交上去了啊。然后同事B默不作声。</p><p>我突然觉得有些可笑，果然大家都习惯于发现别人身上的缺点，从来不会先在自己身上找缺点。</p><p>我又想起我刚毕业入职写程序的时候，因为逻辑不通，总是去请教一个工作比我多3-5年经验的同事，每次我都是去虚心请教，结果就是被他说一顿，然后再给旁边的同事分享这“快乐的片段”，我每次看到他得意的表情，都会怒火中烧，却仍然要保持表情上的平静。也许，这就是职场给我上的一课————<strong>控制情绪，面不改色，然后在深夜里不动声色的提升自己，静待转机出现</strong>。</p><p>以五十步笑百步，在我看来五十步和百步的性质是一样的，只是时间上的长短罢了。</p><p><img src="/2020/07/26/how-wu-shi-bu-xiao-bai-bu/ren.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 29 2020 19:03:27 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;strong&gt;以五十步笑百步，则何如？&lt;/strong&gt;——出自《孟子•梁惠王上》：孟子对曰：“王好战，请以战喻。填然鼓之。兵刃既接，弃甲曳兵而走。或百步
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://octopuslian.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="职场" scheme="https://octopuslian.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="嘲笑" scheme="https://octopuslian.github.io/tags/%E5%98%B2%E7%AC%91/"/>
    
      <category term="同事" scheme="https://octopuslian.github.io/tags/%E5%90%8C%E4%BA%8B/"/>
    
  </entry>
  
</feed>
