<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>以写作调身心</title>
  
  <subtitle>熟能生巧，勤能补拙；念念不忘，必有回响。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://octopuslian.github.io/"/>
  <updated>2021-02-13T13:37:33.910Z</updated>
  <id>https://octopuslian.github.io/</id>
  
  <author>
    <name>Neo Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-35. Search Insert Position | 搜索插入位置</title>
    <link href="https://octopuslian.github.io/2021/02/13/leetcode-35-search-insert-position/"/>
    <id>https://octopuslian.github.io/2021/02/13/leetcode-35-search-insert-position/</id>
    <published>2021-02-13T13:36:51.000Z</published>
    <updated>2021-02-13T13:37:33.910Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/search-insert-position/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: nums = [1,3,5,6], target = 5</span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: nums = [1,3,5,6], target = 2</span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Example 3:</span><br><span class="line">Input: nums = [1,3,5,6], target = 7</span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Example 4:</span><br><span class="line">Input: nums = [1,3,5,6], target = 0</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Example 5:</span><br><span class="line">Input: nums = [1], target = 0</span><br><span class="line">Output: 0</span><br><span class="line"> </span><br><span class="line">Constraints:</span><br><span class="line">1 &lt;= nums.length &lt;= 104</span><br><span class="line">-104 &lt;= nums[i] &lt;= 104</span><br><span class="line">nums contains distinct values sorted in ascending order.</span><br><span class="line">-104 &lt;= target &lt;= 104</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目为简单难度。</p><h3 id="解法一：暴力求解法"><a href="#解法一：暴力求解法" class="headerlink" title="解法一：暴力求解法"></a>解法一：暴力求解法</h3><p>使用<code>for</code>循环遍历<code>nums</code>数组，从下标<code>0</code>开始按个与目标值<code>target</code>进行对比，如果<code>nums[i]&gt;=target</code>，说明目标值在数组所有元素之前，直接返回<code>i</code>即可；另一种情况就是目标值在数组所有元素之后，这时返回<code>nums</code>数组长度<code>len(nums)</code>即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>;i &lt;<span class="built_in">len</span>(nums);i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt;= target &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode：</span><br><span class="line">Runtime: 4 ms, faster than 88.29% of Go online submissions for Search Insert Position.</span><br><span class="line">Memory Usage: 3.1 MB, less than 100.00% of Go online submissions for Search Insert Position.</span><br><span class="line"></span><br><span class="line">leetcode-cn：</span><br><span class="line">执行用时：4 ms, 在所有 Go 提交中击败了90.15%的用户</span><br><span class="line">内存消耗：2.9 MB, 在所有 Go 提交中击败了100.00%的用户</span><br></pre></td></tr></table></figure><h3 id="解法二：二分查找法"><a href="#解法二：二分查找法" class="headerlink" title="解法二：二分查找法"></a>解法二：二分查找法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">        <span class="comment">// 下方写法为了防止数据溢出，如果先加在除以2 加完的值可能会大于INT_MAX，造成溢出 </span></span><br><span class="line">        mid := low + (high - low) / <span class="number">2</span></span><br><span class="line">        guess := nums[mid]</span><br><span class="line">        <span class="keyword">if</span> guess == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid <span class="comment">//找到了，返回下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> guess &gt; target &#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid +<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low <span class="comment">//没找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn：</span><br><span class="line">执行用时：4 ms, 在所有 Go 提交中击败了90.15%的用户</span><br><span class="line">内存消耗：3 MB, 在所有 Go 提交中击败了56.60%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 8 ms, faster than 8.78% of Go online submissions for Search Insert Position.</span><br><span class="line">Memory Usage: 3.3 MB, less than 6.08% of Go online submissions for Search Insert Position.</span><br></pre></td></tr></table></figure><h3 id="解法三：golang-sort-SearchInts包"><a href="#解法三：golang-sort-SearchInts包" class="headerlink" title="解法三：golang-sort.SearchInts包"></a>解法三：<a href="https://golang.org/pkg/sort/#SearchInts" target="_blank" rel="noopener">golang-sort.SearchInts</a>包</h3><p>解题时不推荐。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sort.SearchInts(nums, target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode：</span><br><span class="line">Runtime: 4 ms, faster than 88.29% of Go online submissions for Search Insert Position.</span><br><span class="line">Memory Usage: 3.1 MB, less than 100.00% of Go online submissions for Search Insert Position.</span><br><span class="line"></span><br><span class="line">leetcode-cn：</span><br><span class="line">执行用时：4 ms, 在所有 Go 提交中击败了90.15%的用户</span><br><span class="line">内存消耗：3 MB, 在所有 Go 提交中击败了56.60%的用户</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="暴力法" scheme="https://octopuslian.github.io/tags/%E6%9A%B4%E5%8A%9B%E6%B3%95/"/>
    
      <category term="排序" scheme="https://octopuslian.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="二分法" scheme="https://octopuslian.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-28-implement-strstr | 实现 strStr()</title>
    <link href="https://octopuslian.github.io/2021/02/12/leetcode-28-implement-strstr/"/>
    <id>https://octopuslian.github.io/2021/02/12/leetcode-28-implement-strstr/</id>
    <published>2021-02-12T13:53:52.000Z</published>
    <updated>2021-02-12T14:38:26.671Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Implement strStr().</p><p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p>Clarification:</p><p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">Example 3:</span><br><span class="line">Input: haystack = &quot;&quot;, needle = &quot;&quot;</span><br><span class="line">Output: 0</span><br><span class="line"> </span><br><span class="line">Constraints:</span><br><span class="line">0 &lt;= haystack.length, needle.length &lt;= 5 * 104</span><br><span class="line">haystack and needle consist of only lower-case English characters.</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>难度简单。<br>这道题就是说要找到<code>needle</code>在<code>haystack</code>第一个出现的位置，如果没有出现就返回<code>-1</code>。</p><h3 id="解法一：暴力法"><a href="#解法一：暴力法" class="headerlink" title="解法一：暴力法"></a>解法一：暴力法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">//考虑特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(haystack) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(needle) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(haystack) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(needle) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(haystack) &lt; <span class="built_in">len</span>(needle) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    len_h := <span class="built_in">len</span>(haystack)  <span class="comment">//获取haystack字符串的长度</span></span><br><span class="line">    len_n := <span class="built_in">len</span>(needle)  <span class="comment">//获取needle字符串的长度</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;len_h-len_n+<span class="number">1</span>;i++ &#123;</span><br><span class="line">        j := <span class="number">0</span>;  <span class="comment">//子串每次都要重头开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> ;j&lt;len_n;j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i+j] != needle[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == len_n) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn：</span><br><span class="line">执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户</span><br><span class="line">内存消耗：2.2 MB, 在所有 Go 提交中击败了64.54%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 0 ms, faster than 100.00% of Go online submissions for Implement strStr().</span><br><span class="line">Memory Usage: 2.3 MB, less than 100.00% of Go online submissions for Implement strStr().</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><code>Golang</code>中的内置函数<a href="https://golang.org/pkg/strings/#Index" target="_blank" rel="noopener">strings.Index</a>也可以实现，可以参考它的源码实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strings.Index(haystack,needle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="字符串" scheme="https://octopuslian.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="KMP" scheme="https://octopuslian.github.io/tags/KMP/"/>
    
      <category term="暴力法" scheme="https://octopuslian.github.io/tags/%E6%9A%B4%E5%8A%9B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-27. Remove Element | 移除元素</title>
    <link href="https://octopuslian.github.io/2021/02/10/leetcode-27-remove-element/"/>
    <id>https://octopuslian.github.io/2021/02/10/leetcode-27-remove-element/</id>
    <published>2021-02-10T14:55:59.000Z</published>
    <updated>2021-02-12T15:02:16.313Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p>Clarification:</p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2]</span><br><span class="line">Explanation: Your function should return length = 2, with the first two elements of nums being 2.</span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">Output: 5, nums = [0,1,4,0,3]</span><br><span class="line">Explanation: Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn&apos;t matter what values are set beyond the returned length.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line">0 &lt;= nums.length &lt;= 100</span><br><span class="line">0 &lt;= nums[i] &lt;= 50</span><br><span class="line">0 &lt;= val &lt;= 100</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>难度为简单。</p><p>特别注意<strong>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</strong></p><h3 id="解法一：双指针法"><a href="#解法一：双指针法" class="headerlink" title="解法一：双指针法"></a>解法一：双指针法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">//双指针法</span></span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>;j &lt; <span class="built_in">len</span>(nums);j++ &#123;  <span class="comment">//遍历nums数组</span></span><br><span class="line">        <span class="keyword">if</span> nums[j] != val &#123;  <span class="comment">//如果nums下标 j 对应的元素不等于 val</span></span><br><span class="line">            nums[i] = nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn：</span><br><span class="line">执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户</span><br><span class="line">内存消耗：2.1 MB, 在所有 Go 提交中击败了99.85%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 0 ms, faster than 100.00% of Go online submissions for Remove Element.</span><br><span class="line">Memory Usage: 2.1 MB, less than 17.08% of Go online submissions for Remove Element.</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="双指针法" scheme="https://octopuslian.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26.Remove Duplicates from Sorted Array | 删除排序数组中的重复项</title>
    <link href="https://octopuslian.github.io/2021/02/09/leetcode-26-remove-duplicates-from-sorted-array/"/>
    <id>https://octopuslian.github.io/2021/02/09/leetcode-26-remove-duplicates-from-sorted-array/</id>
    <published>2021-02-09T14:24:56.000Z</published>
    <updated>2021-02-09T16:15:33.455Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">leetcode-cn</a></li><li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">leetcode</a></li></ul><p>Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>Clarification:</p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums = [1,1,2]</span><br><span class="line">Output: 2, nums = [1,2]</span><br><span class="line">Explanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&apos;t matter what you leave beyond the returned length.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">Output: 5, nums = [0,1,2,3,4]</span><br><span class="line">Explanation: Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn&apos;t matter what values are set beyond the returned length.</span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line">0 &lt;= nums.length &lt;= 3 * 104</span><br><span class="line">-104 &lt;= nums[i] &lt;= 104</span><br><span class="line">nums is sorted in ascending order.</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题就是希望让我返回一个没有重复数字的数组的大小，且不要使用额外的数组空间，必须在原地修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><h3 id="解法一：暴力"><a href="#解法一：暴力" class="headerlink" title="解法一：暴力"></a>解法一：暴力</h3><p>用<code>for</code>循环从数组<code>nums</code>末尾的最后一个数字开始遍历，让数组<code>nums</code>末尾最后一个数字与末尾最后倒数第二个数字做比较，如果后一个等于前一个，则从数组中删除后一个元素，直到遍历完成，返回新数组的长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="built_in">len</span>(nums)<span class="number">-1</span>;i&gt;<span class="number">0</span>;i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            nums = <span class="built_in">append</span>(nums[:i],nums[i+<span class="number">1</span>:]...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二：双指针法"><a href="#解法二：双指针法" class="headerlink" title="解法二：双指针法"></a>解法二：双指针法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;  <span class="comment">//考虑特殊情况</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    i := <span class="number">0</span>; <span class="comment">//慢指针</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>;j &lt; <span class="built_in">len</span>(nums);j++ &#123;  <span class="comment">//j是快指针</span></span><br><span class="line">        <span class="keyword">if</span> nums[j] != nums[i] &#123;</span><br><span class="line">            i++</span><br><span class="line">            nums[i] = nums[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn：</span><br><span class="line">执行用时：8 ms, 在所有 Go 提交中击败了86.25%的用户</span><br><span class="line">内存消耗：4.6 MB, 在所有 Go 提交中击败了65.76%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 4 ms, faster than 99.38% of Go online submissions for Remove Duplicates from Sorted Array.</span><br><span class="line">Memory Usage: 4.6 MB, less than 100.00% of Go online submissions for Remove Duplicates from Sorted Array.</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="https://octopuslian.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-21.Merge Two Sorted Lists | 合并两个有序链表</title>
    <link href="https://octopuslian.github.io/2021/02/08/leetcode-21-merge-two-sorted-lists/"/>
    <id>https://octopuslian.github.io/2021/02/08/leetcode-21-merge-two-sorted-lists/</id>
    <published>2021-02-08T15:32:13.000Z</published>
    <updated>2021-02-08T15:33:09.345Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: l1 = [], l2 = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: l1 = [], l2 = [0]</span><br><span class="line">Output: [0]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line">The number of nodes in both lists is in the range [0, 50].</span><br><span class="line">-100 &lt;= Node.val &lt;= 100</span><br><span class="line">Both l1 and l2 are sorted in non-decreasing order.</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题是经典的考察链表的题目。</p><h3 id="解法一：递归"><a href="#解法一：递归" class="headerlink" title="解法一：递归"></a>解法一：递归</h3><ul><li>终止条件：两条链表分别名为 <code>l1</code> 和 <code>l2</code>，当 <code>l1</code> 为空或 <code>l2</code> 为空时结束</li><li>返回值：每一层调用都返回排序好的链表头</li><li>本级递归内容：如果 <code>l1</code> 的 <code>val</code> 值更小，则将 <code>l1.next</code> 与排序好的链表头相接，<code>l2</code> 同理</li><li><code>O(m+n)O(m+n)</code>，<code>mm</code> 为 <code>l1</code>的长度，<code>nn</code> 为 <code>l2</code> 的长度</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (l1.Val &lt; l2.Val) &#123;</span><br><span class="line">        l1.Next = mergeTwoLists(l1.Next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        l2.Next = mergeTwoLists(l1, l2.Next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn：</span><br><span class="line">执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户</span><br><span class="line">内存消耗：2.6 MB, 在所有 Go 提交中击败了26.43%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 0 ms, faster than 100.00% of Go online submissions for Merge Two Sorted Lists.</span><br><span class="line">Memory Usage: 2.6 MB, less than 51.09% of Go online submissions for Merge Two Sorted Lists.</span><br></pre></td></tr></table></figure><p>可以看到，该解法执行用时为0ms，非常高效。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/hua-jie-suan-fa-21-he-bing-liang-ge-you-xu-lian-bi/" target="_blank" rel="noopener">力扣-画解算法：21. 合并两个有序链表</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="链表" scheme="https://octopuslian.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="递归" scheme="https://octopuslian.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>你这么一棒子把人打死,难道不嫌太武断了吗?</title>
    <link href="https://octopuslian.github.io/2021/02/06/please-dont-discriminate-geographically/"/>
    <id>https://octopuslian.github.io/2021/02/06/please-dont-discriminate-geographically/</id>
    <published>2021-02-06T13:07:49.000Z</published>
    <updated>2021-02-06T13:12:03.651Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><p><a href="https://book.douban.com/subject/3420392/" target="_blank" rel="noopener">《武林高手在校园》</a>这本穿越小说我高中&amp;大学时读了很多遍，也算是我读的第一本穿越小说，有一处印象比较深的情节，在此记录并抒发一下自己的感受。</p><p>内容应该在73-74节之间，当时油老鼠和林逸飞在街上走着，突然碰到一个人骑自行车钱包掉了出来，立马有人过来说见者有份，要平分赃款，而林逸飞早已识破骗局，于是油老鼠也跟着走了，并说了一句“可恶的河南人”，而林逸飞就说出了我印象最深的话： <em>林逸飞叹息道:“哪个地方都有好人,都会有骗子,你这么一棒子把人打死,难道不嫌太武断了吗?”</em></p><p>为什么我会对这句话印象极其深刻呢？——因为我见过太多的地域歧视。</p><p>上大学那会，我的本科舍友们偶尔会在宿舍关灯后还是唠嗑，这时候我就会闭嘴，因为话题真的很无语，比如——他们一直认为四川人的个子都很矮（我只想说如果都很矮那难道像CBA这种篮球比赛四川队都垫底吗？）；偷井盖子的都是河南人；广东人做的东西不要吃；….等等这种带着地域的偏见。</p><p>然而，当我毕业后，在成都拿了一家互联网公司的offer后，我发现四川当地人并不矮，地铁上、公交车上到处都是高个子；我在部门认识的河南同事都非常乐于助人，有时会停下手里的活帮我来看代码问题；广东的肠粉路边摊到处都是…所以，我学会了怀疑别人说的话，同时也建立了一个前提：哪个地方都有好人,都会有骗子，不能因为这地方出现了这件事情，就把这个地方的人一棍子打死。</p><p>而我也分析了为什么会出现这种现象呢？我罗列了以下原因：</p><ul><li>读书少，没有自己的思想，都是道听途说，别人说什么就信什么；</li><li>媒体作用，总是喜欢把一个地方发生的事件扩大影响，然后再举例子说前多少年也发生类似事件以及水军的无脑附和；</li><li>推荐算法的作用，你倾向于看到什么，算法就会帮你搜集你想看到的，久而久之内心就会产生一种潜意识；</li></ul><p>我很庆幸我生活在一个交通便利的时代，可以到处旅游，见识各地的饮食和风土人情以及方言，所以——写这篇文章也是项表达自己的心声：没事千万不要给不熟悉的地域打上标签，你这么一棒子把人打死,难道不嫌太武断了吗?</p><p>最后引用一下这句话的完整内容，我非常喜欢这段^_^</p><blockquote><p>“可恶的河南人。”油老鼠摇头晃脑的来了这么一句。<br>林逸飞一愣,“为什么这么说?”<br>“刚才那两个就是本地人,可不就是河南人,他们专找外地的旅客下手行骗的。”油老鼠恨恨的说道:“我对河南人向来没有什么好感,再说现在社会也有很多关于河南人的劣迹。” 林逸飞叹息道:“哪个地方都有好人,都会有骗子,你这么一棒子把人打死,难道不嫌太武断了吗?”<br>油老鼠本来想要反驳,突然看到林逸飞的脸色有些沉郁,终于还是嘴边的话咽了回去,点头装作同意道:“林老弟说的是。”<br>看着油老鼠言不由衷的样子,林逸飞苦笑一声,也不再说什么,油老鼠当然不知道,萧别离最尊敬的一个人就是岳元帅,而岳飞偏偏就是河南汤阴人! 从文化意义上来讲,河南实在是一块中国人无法忽视的地域,泱泱大国,千年的华夏文明,正是从这块黄土地发源流淌。<br>这里有着道家的先祖老庄,“外示会儒术,内尊黄道”八个字,为无数的统治者心照不暄的运用,有着墨家的创始人墨翟。提出了意义非凡的‘兼爱’,‘非攻’口号,可以算是最早地和平主义倡导者,有着:;风萧萧兮易水寒,壮士一去兮不复返‘伯侠士荆轲。差一点就凭借手中的宝剑改写了历史,更有着千古传诵,万人景仰的尽忠报国的岳武穆,凭借一腔热血扛起了那面风雨飘摇中地反金大旗! 以悲凉的歌声唱出‘新鬼烦冤旧鬼哭,天阴雨湿声啾啾’这等同情孤苦百姓诗词的杜甫是河南人,写出‘春心莫共花争发,一寸相思一寸灰!’这等华美语句的李商隐也是河南人,那个千百年来的造福苍生的医圣张仲景还是河南人! 而这些不过是河南数不胜数名人中的几个。河南,实在在中国的文明史上留下了不可磨灭地重重烙印,可是如今的人们记住了什么?! 河南人这个本来应该让人骄傲自豪的三个字。正在让人肆无忌惮地嘲笑,毫无顾忌的践踏。这实在是一种文化地悲哀,也是一种‘流言运动’的恶果,更是我们民族整体的悲哀! 在这里,新闻媒体,网络媒介无疑要深刻的反省一下,那些网络推波助澜的也应该停止这种可悲的附和的附和。当你在践踏嘲笑地时候,无疑那点仅存的文明也被你亲手摧毁。<br>“没有谁会比别人高出一等!”林逸飞突然叹息道:“<em>每个人都有尊严,当你认为高出别人一等的时候,我认为,那才是可悲的事情</em>。”<br>油老鼠咀嚼着林逸飞的话,一时竟然有些出神,这难道仅仅是个学生,他实在有着太多当代学生缺乏的东西。</p></blockquote><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/3420392/&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="Review-book" scheme="https://octopuslian.github.io/categories/Review-book/"/>
    
    
      <category term="歧视" scheme="https://octopuslian.github.io/tags/%E6%AD%A7%E8%A7%86/"/>
    
      <category term="地域" scheme="https://octopuslian.github.io/tags/%E5%9C%B0%E5%9F%9F/"/>
    
      <category term="武断" scheme="https://octopuslian.github.io/tags/%E6%AD%A6%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-14-longest-common-prefix | 最长公共前缀</title>
    <link href="https://octopuslian.github.io/2021/02/06/leetcode-14-longest-common-prefix/"/>
    <id>https://octopuslian.github.io/2021/02/06/leetcode-14-longest-common-prefix/</id>
    <published>2021-02-06T12:54:40.000Z</published>
    <updated>2021-02-06T12:55:41.783Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line">0 &lt;= strs.length &lt;= 200</span><br><span class="line">0 &lt;= strs[i].length &lt;= 200</span><br><span class="line">strs[i] consists of only lower-case English letters.</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题目的简单描述就是找一堆字符串的相同前缀，比如<code>flower</code>、<code>flow</code>、<code>flight</code>，发现每个字符串都有前缀<code>fl</code>，于是就将<code>fl</code>返回即可，本题就是要实现这样一个在字符串数组中找最长前缀的函数。</p><h3 id="解法一：暴力"><a href="#解法一：暴力" class="headerlink" title="解法一：暴力"></a>解法一：暴力</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">//排除特殊情况</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">res := strs[<span class="number">0</span>]               <span class="comment">//获取字符串数组里的第一个元素</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> strs[<span class="number">1</span>:] &#123; <span class="comment">//从字符串数组第二个元素开始遍历</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(v) &amp;&amp; i &lt; <span class="built_in">len</span>(res); i++ &#123; <span class="comment">//遍历两数组里的元素</span></span><br><span class="line"><span class="keyword">if</span> res[i] != v[i] &#123; <span class="comment">//做判断，如果不相等</span></span><br><span class="line"><span class="keyword">break</span> <span class="comment">//直接结束循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = res[:i]</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res <span class="comment">//返回空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种相似解法，会用到<a href="https://golang.org/pkg/strings/#Index" target="_blank" rel="noopener">strings.Index</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) &lt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    prefix := strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _,k := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        <span class="keyword">for</span> strings.Index(k,prefix) != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(prefix) == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">            prefix = prefix[:<span class="built_in">len</span>(prefix) - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">力扣：</span><br><span class="line">执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户</span><br><span class="line">内存消耗：2.3 MB, 在所有 Go 提交中击败了55.76%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 0 ms, faster than 100.00% of Go online submissions for Longest Common Prefix.</span><br><span class="line">Memory Usage: 2.4 MB, less than 100.00% of Go online submissions for Longest Common Prefix.</span><br></pre></td></tr></table></figure><h2 id="参考题解"><a href="#参考题解" class="headerlink" title="参考题解"></a>参考题解</h2><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/solution/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/" target="_blank" rel="noopener">力扣官方题解-5种解法</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="字符串" scheme="https://octopuslian.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="暴力" scheme="https://octopuslian.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-13-roman-to-integer | 罗马数字转整数</title>
    <link href="https://octopuslian.github.io/2021/02/05/leetcode-13-roman-to-integer/"/>
    <id>https://octopuslian.github.io/2021/02/05/leetcode-13-roman-to-integer/</id>
    <published>2021-02-05T15:39:46.000Z</published>
    <updated>2021-02-06T12:58:32.597Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">力扣</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先维护一个<code>map</code>，用于建立罗马数字和整数的关系，接着挨个破译即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> charToIntMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>, <span class="number">8</span>)</span><br><span class="line">    charToIntMap[<span class="string">'I'</span>] = <span class="number">1</span></span><br><span class="line">    charToIntMap[<span class="string">'V'</span>] = <span class="number">5</span></span><br><span class="line">    charToIntMap[<span class="string">'X'</span>] = <span class="number">10</span></span><br><span class="line">    charToIntMap[<span class="string">'L'</span>] = <span class="number">50</span></span><br><span class="line">    charToIntMap[<span class="string">'C'</span>] = <span class="number">100</span></span><br><span class="line">    charToIntMap[<span class="string">'D'</span>] = <span class="number">500</span></span><br><span class="line">    charToIntMap[<span class="string">'M'</span>] = <span class="number">1000</span></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> s[i] &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; (s[i+<span class="number">1</span>] == <span class="string">'V'</span> || s[i+<span class="number">1</span>] == <span class="string">'X'</span>) &#123;</span><br><span class="line">                sum -= charToIntMap[s[i]]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += charToIntMap[s[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; (s[i+<span class="number">1</span>] == <span class="string">'L'</span> || s[i+<span class="number">1</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">                sum -= charToIntMap[s[i]]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += charToIntMap[s[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; (s[i+<span class="number">1</span>] == <span class="string">'D'</span> || s[i+<span class="number">1</span>] == <span class="string">'M'</span>) &#123;</span><br><span class="line">                sum -= charToIntMap[s[i]]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += charToIntMap[s[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            sum += charToIntMap[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn执行：</span><br><span class="line">执行用时：16 ms, 在所有 Go 提交中击败了22.55%的用户</span><br><span class="line">内存消耗：3.1 MB, 在所有 Go 提交中击败了78.12%的用户</span><br><span class="line"></span><br><span class="line">leetcode执行：</span><br><span class="line">Runtime: 8 ms, faster than 64.36% of Go online submissions for Roman to Integer.</span><br><span class="line">Memory Usage: 3.1 MB, less than 100.00% of Go online submissions for Roman to Integer.</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="数字转换" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>6次提交完善Github个人简介</title>
    <link href="https://octopuslian.github.io/2021/02/01/six-github-commits-update-my-github-readme/"/>
    <id>https://octopuslian.github.io/2021/02/01/six-github-commits-update-my-github-readme/</id>
    <published>2021-02-01T14:55:01.000Z</published>
    <updated>2021-02-01T15:03:57.621Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><p>半年前意外看到了阿里巴巴半霜大佬的<code>Github</code>个人界面，甚是喜欢，今天晚上我利用了一个半小时的时间查资料分析代码，，地址点<a href="https://github.com/OctopusLian" target="_blank" rel="noopener">这里</a></p><p>个人觉得一个好的<code>Github</code>页面应该包含以下内容：</p><ul><li>简短的个人介绍</li><li>最近的学习情况和期待完成的事</li><li>社交&amp;其他技术网站链接</li><li>常用的软件和编程语言</li><li><code>Github</code>信息，包括star数、commit次数、PRs等</li><li>项目列表</li></ul><p>以上，是我完成这次个人<code>README</code>的动力。</p><p>最后我想说，前端还是很有趣的，有空一定要系统学习一下^_^</p><p><a href="https://www.cnblogs.com/xueweihan/p/13441511.html" target="_blank" rel="noopener">【译】10 款国外实用、有趣的 GitHub 简介 README</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;半年前意外看到了阿里巴巴半霜大佬的&lt;code&gt;Github&lt;/code&gt;个人界面，甚是喜欢，今天晚上我利用了一个半小时的时间
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="github" scheme="https://octopuslian.github.io/tags/github/"/>
    
      <category term="简介" scheme="https://octopuslian.github.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
      <category term="README" scheme="https://octopuslian.github.io/tags/README/"/>
    
  </entry>
  
  <entry>
    <title>开课吧直播_C/C++开发实战3天训练营</title>
    <link href="https://octopuslian.github.io/2021/01/29/kaikeba-live-cpp-dev-3days-act-tc/"/>
    <id>https://octopuslian.github.io/2021/01/29/kaikeba-live-cpp-dev-3days-act-tc/</id>
    <published>2021-01-29T11:37:53.000Z</published>
    <updated>2021-02-01T15:10:02.850Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="直播老师"><a href="#直播老师" class="headerlink" title="直播老师"></a>直播老师</h2><p>胡光，船长。</p><p>(由于这个课程就是讲解一个<code>Google</code>的测试框架，在此不做详细描述，主要是对直播课的一些有用的问题做记录)</p><h2 id="面试题1-一个数变为二进制后有多少个1？"><a href="#面试题1-一个数变为二进制后有多少个1？" class="headerlink" title="面试题1-一个数变为二进制后有多少个1？"></a>面试题1-一个数变为二进制后有多少个1？</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法一：位运算  </span></span><br><span class="line"><span class="comment">//运算次数32次</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_cnt_v1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; (<span class="number">1</span> &lt;&lt; i)) cnt += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法二：while循环，借位</span></span><br><span class="line"><span class="comment">//运算次数16次</span></span><br><span class="line"><span class="keyword">int</span> count_cnt_v2(<span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        x = x &amp; (x - <span class="number">1</span>);</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法三：分组统计法</span></span><br><span class="line"><span class="comment">//运算次数8次</span></span><br><span class="line"><span class="keyword">int</span> arr_cnt[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count_cnt_v3(<span class="keyword">int</span> x)&#123;</span><br><span class="line">     <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">         cnt += arr_cnt[(x &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">0xf</span>];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法四：字符串取位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_cnt_v4</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">         cnt += <span class="string">"0\1\1\2\1\2\2\3\1\2\3\3\2\3\3\4"</span>[(x &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">0xf</span>];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法五：分统计法</span></span><br><span class="line"><span class="comment">//运算次数5次</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_cnt_v5</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    x = (x &amp; <span class="number">0</span>x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="百度面试要求"><a href="#百度面试要求" class="headerlink" title="百度面试要求"></a>百度面试要求</h2><p><img src="/2021/01/29/kaikeba-live-cpp-dev-3days-act-tc/baidu1.png" alt></p><h2 id="撸代码-快速排序"><a href="#撸代码-快速排序" class="headerlink" title="撸代码-快速排序"></a>撸代码-快速排序</h2><ul><li>第一步：选择基准值；</li><li>第二步：partition</li><li>第三步：递归调度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版本一</span></span><br><span class="line"><span class="comment">//2404ms</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_v1</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> x = l,y = z,z = arr[l];</span><br><span class="line">    <span class="keyword">while</span>(x &lt; y) &#123;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y &amp;&amp; arr[y] &gt;= z) --y;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; y) arr[x++] = arr[y];</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y &amp;&amp; arr[x] &lt;= z) ++x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//版本二：单边递归法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//版本三：无监督的算法优化思想</span></span><br></pre></td></tr></table></figure><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="为什么C-难学？"><a href="#为什么C-难学？" class="headerlink" title="为什么C++难学？"></a>为什么C++难学？</h3><p>C++支持四种编程范式：</p><ul><li>面向过程的编程范式</li><li>面向对象的编程范式</li><li>泛型编程，模板</li><li>函数式编程</li></ul><p>C++是一门极其考验技术想象力的编程语言。所以一定要学好C语言、算法、操作系统、网络。</p><h3 id="推荐的考试和竞赛"><a href="#推荐的考试和竞赛" class="headerlink" title="推荐的考试和竞赛"></a>推荐的考试和竞赛</h3><ul><li>PAT</li><li>CSP / 蓝桥杯</li><li>ACM</li></ul><h3 id="IDE包含了哪些"><a href="#IDE包含了哪些" class="headerlink" title="IDE包含了哪些"></a>IDE包含了哪些</h3><p>集成环境，集成了很多东西，比如：</p><ul><li>编辑器(vim)</li><li>编译器(g++)</li><li>调试器(gdb)</li></ul><h3 id="什么叫函数的定义？"><a href="#什么叫函数的定义？" class="headerlink" title="什么叫函数的定义？"></a>什么叫函数的定义？</h3><p>能看到函数的实现过程。</p><h3 id="什么叫函数的声明？"><a href="#什么叫函数的声明？" class="headerlink" title="什么叫函数的声明？"></a>什么叫函数的声明？</h3><p>告诉程序有这样一个函数。</p><h3 id="什么是条件式编译？"><a href="#什么是条件式编译？" class="headerlink" title="什么是条件式编译？"></a>什么是条件式编译？</h3><h3 id="什么叫无监督的算法优化思想？"><a href="#什么叫无监督的算法优化思想？" class="headerlink" title="什么叫无监督的算法优化思想？"></a>什么叫无监督的算法优化思想？</h3><p>用插入排序来举例：</p><p>最简单的排序算法，类似插队，一直向前插队</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) &#123; \</span></span><br><span class="line">    __typeof(a) __c = a; \</span><br><span class="line">    a = b, b = _c; \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>;i &lt;= r;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; l &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;  <span class="comment">//重点 j &gt; l 是监督项，防止下标越界</span></span><br><span class="line">            swap(arr[j],arr[j<span class="number">-1</span>]);</span><br><span class="line">            j -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> un</span><br></pre></td></tr></table></figure><h3 id="为什么插入排序要一个一个的往前调整？"><a href="#为什么插入排序要一个一个的往前调整？" class="headerlink" title="为什么插入排序要一个一个的往前调整？"></a>为什么插入排序要一个一个的往前调整？</h3><p>答：为了不破坏稳定性。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;直播老师&quot;&gt;&lt;a href=&quot;#直播老师&quot; class=&quot;headerlink&quot; title=&quot;直播老师&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Share-live" scheme="https://octopuslian.github.io/categories/Share-live/"/>
    
    
      <category term="C++" scheme="https://octopuslian.github.io/tags/C/"/>
    
      <category term="模块编译" scheme="https://octopuslian.github.io/tags/%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>《工作细胞Black》第3集——或许是我见过的最好的性教育动画片</title>
    <link href="https://octopuslian.github.io/2021/01/25/work-cell-black-3-erection/"/>
    <id>https://octopuslian.github.io/2021/01/25/work-cell-black-3-erection/</id>
    <published>2021-01-25T12:43:12.000Z</published>
    <updated>2021-01-27T05:32:40.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="第3集剧情简介"><a href="#第3集剧情简介" class="headerlink" title="第3集剧情简介"></a>第3集剧情简介</h2><p>周末跟完了《工作细胞 BLACK》的最新剧集，第三集的剧情给我留下了非常深刻的印象，因为它触碰到了我上小学和中学的知识禁区——性行为。</p><p>第3集的大致剧情是一群红细胞收到了比运输氧气更重要的任务，就是这具身体因生殖行为而进行兴奋状态，需要红细胞使阴茎中的海绵组织（海绵体）勃起，完成射精！</p><p><img src="/2021/01/25/work-cell-black-3-erection/wcell.png" alt></p><p>但结果非常不顺：刚开始红细胞排成一队进入海绵体，把螺旋动脉张开，血液进去，进入勃起状态，看似一切顺利</p><p><img src="/2021/01/25/work-cell-black-3-erection/tianchong.png" alt></p><p>紧接着<strong>海绵体的环磷酸鸟苷值正在急剧下降，平滑肌的松弛状态已经解除了，原因是环磷酸鸟苷产量不足，似乎是性兴奋无法顺利通过神经传达到阴茎</strong>——感觉好多陌生名词哦，其实简单来说就是“还没有射精，勃起就停止了，这就是ED（勃起功能障碍）”，这样下去人体没办法勃起-&gt;没办法射精-&gt;精细胞和卵细胞就无法相遇形成受精卵-&gt;生命就无法延续下去。感觉情况很糟糕，就在系统都宣布这次勃起任务失败了，局势逆转了：</p><p><strong>海绵体的环磷酸鸟苷值正在急剧上升，原因是外部投入了伟哥，使PDE5（能够分解环磷酸鸟苷的酶）遭到抑制。</strong></p><p><img src="/2021/01/25/work-cell-black-3-erection/weige.png" alt></p><p>最终，血液填充率达到100%-&gt;静脉出口关闭-&gt;阴茎完全勃起了-&gt;收到射精中枢传来的信号，精子们做好射精准备-&gt;射精准备完毕-&gt;收缩尿道括约肌（尿液和精液就不会同时射出，精液进入前列腺后，尿道的出入口就会关闭，然后只打开出口，精液就会因猛烈的压力而射出）-&gt;收缩完毕-&gt;发射-&gt;射精完毕。</p><p><img src="/2021/01/25/work-cell-black-3-erection/jz1.png" alt><br><img src="/2021/01/25/work-cell-black-3-erection/jz2.png" alt></p><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>我依稀记得，我第一次接触性知识是初二的生物课上，课本上画了一幅男性性生殖器官构造图，女性的也有，但当时很害羞就直接盖上了，上课的时候老是讲到这也只是简单说男性的生殖器官是阴茎和睾丸，女性的是子宫，它们分别产生精细胞和暖细胞，好了记到这吧，考试不会超出这范围。</p><p>我当时对生物非常感兴趣，总是好奇生命是如何产生的。</p><p>直到有节健康课，老师放了一段受精卵形成的过程，好多精子奔向卵子，我才对理解了一些，高中对这块的知识会在受精后的变化加大考查和分值，而对于为什么有些人性行为的时候要用伟哥，射精前身体要做哪些准备，我都不知道，当然考试也不会考。</p><p>非常感谢这部动漫，让我更形象的看到生命延续的全部过程，也让我更加爱惜自己的身体，拒绝修996福报！！！</p><p>最后我想说，性不应该是洪水猛兽，如果对性这块懵懂的朋友，我非常推荐看这部剧，就从第3集来说，是我目前看到的非常棒的性教育动画片！</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;第3集剧情简介&quot;&gt;&lt;a href=&quot;#第3集剧情简介&quot; class=&quot;headerlink&quot; title=&quot;第3集
      
    
    </summary>
    
    
      <category term="Review-film" scheme="https://octopuslian.github.io/categories/Review-film/"/>
    
    
      <category term="工作细胞" scheme="https://octopuslian.github.io/tags/%E5%B7%A5%E4%BD%9C%E7%BB%86%E8%83%9E/"/>
    
      <category term="勃起" scheme="https://octopuslian.github.io/tags/%E5%8B%83%E8%B5%B7/"/>
    
      <category term="性教育" scheme="https://octopuslian.github.io/tags/%E6%80%A7%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-深度优先搜索、广度优先搜索的实现和特性</title>
    <link href="https://octopuslian.github.io/2021/01/23/geekbang-gatc-09-dfs-and-bfs/"/>
    <id>https://octopuslian.github.io/2021/01/23/geekbang-gatc-09-dfs-and-bfs/</id>
    <published>2021-01-23T13:05:22.000Z</published>
    <updated>2021-01-23T13:51:26.457Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="搜索-遍历"><a href="#搜索-遍历" class="headerlink" title="搜索-遍历"></a>搜索-遍历</h2><ul><li>每个节点都要访问一次</li><li>每个节点仅仅要访问一次（不做无用功）</li><li>对于节点的访问顺序不限：dfs / bfs</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="DFS算法模板"><a href="#DFS算法模板" class="headerlink" title="DFS算法模板"></a>DFS算法模板</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">in</span> visited:</span><br><span class="line">        <span class="comment"># already visited</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    visited.add(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># process current node</span></span><br><span class="line">    <span class="comment"># ... logic here</span></span><br><span class="line"></span><br><span class="line">    dfs(node.left)</span><br><span class="line">    dfs(node.right)</span><br></pre></td></tr></table></figure><h3 id="DFS代码-递归写法"><a href="#DFS代码-递归写法" class="headerlink" title="DFS代码-递归写法"></a>DFS代码-递归写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visited = set()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node,visited)</span>:</span></span><br><span class="line">    visited.add(node)</span><br><span class="line">    <span class="comment"># process current node here</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> next_node <span class="keyword">in</span> node.children():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_node <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(next node,visited)</span><br></pre></td></tr></table></figure><h3 id="DFS代码-非递归写法"><a href="#DFS代码-非递归写法" class="headerlink" title="DFS代码-非递归写法"></a>DFS代码-非递归写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self,tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    visited,stack = [].[tree.root]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line"></span><br><span class="line">        process(node)</span><br><span class="line">        nodes = generagte_related_nodes(node)</span><br><span class="line">        stack.push(nodes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># other processing work</span></span><br></pre></td></tr></table></figure><h3 id="BFS代码"><a href="#BFS代码" class="headerlink" title="BFS代码"></a>BFS代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(graph,start,end)</span>:</span></span><br><span class="line">    queue = []</span><br><span class="line">    queue.append([start])</span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line"></span><br><span class="line">        process(node)</span><br><span class="line">        nodes = generagte_related_nodes(node)</span><br><span class="line">        queue.push(nodes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># other processing work</span></span><br></pre></td></tr></table></figure><h2 id="DFS和BFS遍历顺序"><a href="#DFS和BFS遍历顺序" class="headerlink" title="DFS和BFS遍历顺序"></a>DFS和BFS遍历顺序</h2><p><img src="/2021/01/23/geekbang-gatc-09-dfs-and-bfs/shunxu.png" alt></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://visualgo.net/en" target="_blank" rel="noopener">https://visualgo.net/en</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;搜索-遍历&quot;&gt;&lt;a href=&quot;#搜索-遍历&quot; class=&quot;headerlink&quot; title=&quot;搜索-遍历&quot;&gt;
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="BFS" scheme="https://octopuslian.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="https://octopuslian.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-分治、回溯的实现和特性</title>
    <link href="https://octopuslian.github.io/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/"/>
    <id>https://octopuslian.github.io/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/</id>
    <published>2021-01-23T06:34:59.000Z</published>
    <updated>2021-01-23T13:13:00.844Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="分治的思想"><a href="#分治的思想" class="headerlink" title="分治的思想"></a>分治的思想</h2><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/digui-tree.png" alt></p><p>本质就是<strong>找重复性和分解问题，以及最后组合每个子问题的结果。</strong></p><p>例如：</p><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/divide.png" alt></p><p>代码模板：</p><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/divide-code.png" alt></p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>百度百科解释：</p><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/back-baidu.png" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;分治的思想&quot;&gt;&lt;a href=&quot;#分治的思想&quot; class=&quot;headerlink&quot; title=&quot;分治的思想&quot;&gt;
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="递归" scheme="https://octopuslian.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="回溯" scheme="https://octopuslian.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="分治" scheme="https://octopuslian.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>LeetBook-binary-search | 二分查找</title>
    <link href="https://octopuslian.github.io/2021/01/23/leetcode-leetbook-binary-search/"/>
    <id>https://octopuslian.github.io/2021/01/23/leetcode-leetbook-binary-search/</id>
    <published>2021-01-23T03:31:46.000Z</published>
    <updated>2021-01-23T09:51:13.664Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="它是如何工作的？"><a href="#它是如何工作的？" class="headerlink" title="它是如何工作的？"></a>它是如何工作的？</h2><p>在最简单的形式中，二分查找对具有指定左索引和右索引的连续序列进行操作。这就是所谓的查找空间。二分查找维护查找空间的左、右和中间指示符，并比较查找目标或将查找条件应用于集合的中间值；如果条件不满足或值不相等，则清除目标不可能存在的那一半，并在剩下的一半上继续查找，直到成功为止。如果查以空的一半结束，则无法满足条件，并且无法找到目标。</p><h2 id="LC二分查找"><a href="#LC二分查找" class="headerlink" title="LC二分查找"></a>LC二分查找</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">你可以假设 nums 中的所有元素是不重复的。</span><br><span class="line">n 将在 [1, 10000]之间。</span><br><span class="line">nums 的每个元素都将在 [-9999, 9999]之间。</span><br></pre></td></tr></table></figure><h3 id="Golang代码"><a href="#Golang代码" class="headerlink" title="Golang代码"></a>Golang代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">        mid := low + (high - low) / <span class="number">2</span></span><br><span class="line">        midValue := nums[mid]</span><br><span class="line">        <span class="keyword">if</span> midValue == target &#123;</span><br><span class="line">            <span class="comment">//target值存在，返回下标</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> midValue &gt; target&#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找模板分析"><a href="#二分查找模板分析" class="headerlink" title="二分查找模板分析"></a>二分查找模板分析</h2><p>你在网上看到的 99% 的二分查找问题会归结于这 3 个模板中的一个。有些问题可以使用多个模板来实现，但是当你做更多的练习时，你会注意到一些模板比其他模板更适合某些问题。</p><p><img src="/2021/01/23/leetcode-leetbook-binary-search/muban.png" alt></p><p>这三个模板不同之处在于：</p><ul><li>左、中、右索引的分配。</li><li>循环或递归终止条件。</li><li>后处理的必要性。</li></ul><p>模板 #1 和 #3 是最常用的，几乎所有二分查找问题都可以用其中之一轻松实现。模板 #2 更 高级一些，用于解决某些类型的问题。</p><h3 id="模板-1-left-lt-right"><a href="#模板-1-left-lt-right" class="headerlink" title="模板 #1 (left &lt;= right)"></a>模板 #1 (left &lt;= right)</h3><ul><li>二分查找的最基础和最基本的形式。</li><li>查找条件可以在不与元素的两侧进行比较的情况下确定（或使用它周围的特定元素）。</li><li>不需要后处理，因为每一步中，你都在检查是否找到了元素。如果到达末尾，则知道未找到该元素。</li></ul><h3 id="模板-2-left-lt-right"><a href="#模板-2-left-lt-right" class="headerlink" title="模板 #2 (left &lt; right)"></a>模板 #2 (left &lt; right)</h3><ul><li>一种实现二分查找的高级方法。</li><li>查找条件需要访问元素的直接右邻居。</li><li>使用元素的右邻居来确定是否满足条件，并决定是向左还是向右。</li><li>保证查找空间在每一步中至少有 2 个元素。</li><li>需要进行后处理。 当你剩下 1 个元素时，循环 / 递归结束。 需要评估剩余元素是否符合条件。</li></ul><h3 id="模板-3-left-1-lt-right"><a href="#模板-3-left-1-lt-right" class="headerlink" title="模板 #3 (left + 1 &lt; right)"></a>模板 #3 (left + 1 &lt; right)</h3><ul><li>实现二分查找的另一种方法。</li><li>搜索条件需要访问元素的直接左右邻居。</li><li>使用元素的邻居来确定它是向右还是向左。</li><li>保证查找空间在每个步骤中至少有 3 个元素。</li><li>需要进行后处理。 当剩下 2 个元素时，循环 / 递归结束。 需要评估其余元素是否符合条件。</li></ul><h2 id="时间和空间复杂度："><a href="#时间和空间复杂度：" class="headerlink" title="时间和空间复杂度："></a>时间和空间复杂度：</h2><p>时间：O(log n) —— 算法时间</p><p>因为二分查找是通过对查找空间中间的值应用一个条件来操作的，并因此将查找空间折半，在更糟糕的情况下，我们将不得不进行 O(log n) 次比较，其中 n 是集合中元素的数目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为什么是 log n？</span><br><span class="line"></span><br><span class="line">二分查找是通过将现有数组一分为二来执行的。</span><br><span class="line">因此，每次调用子例程(或完成一次迭代)时，其大小都会减少到现有部分的一半。</span><br><span class="line">首先 N 变成 N/2，然后又变成 N/4，然后继续下去，直到找到元素或尺寸变为 1。</span><br><span class="line">迭代的最大次数是 log N (base 2) 。</span><br></pre></td></tr></table></figure><p>空间：O(1) —— 常量空间</p><p>虽然二分查找确实需要跟踪 3 个指标，但迭代解决方案通常不需要任何其他额外空间，并且可以直接应用于集合本身，因此需要 O(1) 或常量空间。</p><p>注：以上内容来自LeetCode-cn中的LeetBook内容。</p><p>希望通过今天的学习可以入门了解二分查找。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;它是如何工作的？&quot;&gt;&lt;a href=&quot;#它是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;它
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="二分查找" scheme="https://octopuslian.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-哈希表、映射、集合的实现与特性</title>
    <link href="https://octopuslian.github.io/2021/01/22/geekbang-gatc-05-hashmap-and-set/"/>
    <id>https://octopuslian.github.io/2021/01/22/geekbang-gatc-05-hashmap-and-set/</id>
    <published>2021-01-22T13:45:13.000Z</published>
    <updated>2021-01-22T14:00:27.164Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="哈希表（Hash-Table）"><a href="#哈希表（Hash-Table）" class="headerlink" title="哈希表（Hash Table）"></a>哈希表（Hash Table）</h2><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-table.png" alt></p><p>工程实践：电话号码簿、用户信息表、缓存（LRU Cache）、键值对存储（Redis）。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>哈希函数：<br><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-func.png" alt></p><p>哈希碰撞：<br><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-collisions.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-collisions2.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/wanzheng.png" alt></p><h2 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h2><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/map-set.png" alt></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Set.html" target="_blank" rel="noopener">Set Java 12 doc</a></p><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Map.html" target="_blank" rel="noopener">Map Java 12 doc</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;哈希表（Hash-Table）&quot;&gt;&lt;a href=&quot;#哈希表（Hash-Table）&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="哈希表" scheme="https://octopuslian.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="映射" scheme="https://octopuslian.github.io/tags/%E6%98%A0%E5%B0%84/"/>
    
      <category term="集合" scheme="https://octopuslian.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-20-valid-parentheses | 有效的括号</title>
    <link href="https://octopuslian.github.io/2021/01/22/leetcode-20-valid-parentheses/"/>
    <id>https://octopuslian.github.io/2021/01/22/leetcode-20-valid-parentheses/</id>
    <published>2021-01-22T09:09:19.000Z</published>
    <updated>2021-02-07T14:38:33.413Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Given a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><ul><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;()&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;(]&quot;</span><br><span class="line">Output: false</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;([)]&quot;</span><br><span class="line">Output: false</span><br><span class="line">Example 5:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line">1 &lt;= s.length &lt;= 104</span><br><span class="line">s consists of parentheses only &apos;()[]&#123;&#125;&apos;.</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题是经典的考察栈的题目。</p><h3 id="解法一：使用strings-Replace替换为空"><a href="#解法一：使用strings-Replace替换为空" class="headerlink" title="解法一：使用strings.Replace替换为空"></a>解法一：使用<a href="https://golang.org/pkg/strings/#Replace" target="_blank" rel="noopener">strings.Replace</a>替换为空</h3><p>直接用<code>strings.Replace</code>方法，将<code>()、[]、{}</code>这样的字符串替换为空，如果最后全都可以替换掉，说明是有效字符串，返回<code>true</code>，否则返回<code>false</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(s) != <span class="number">0</span> &#123;</span><br><span class="line">temp := s</span><br><span class="line">s = strings.Replace(s, <span class="string">"()"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">s = strings.Replace(s, <span class="string">"[]"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">s = strings.Replace(s, <span class="string">"&#123;&#125;"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s == temp &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn执行：</span><br><span class="line">执行用时：4 ms, 在所有 Go 提交中击败了6.50%的用户</span><br><span class="line">内存消耗：7.1 MB, 在所有 Go 提交中击败了5.26%的用户</span><br><span class="line"></span><br><span class="line">leetcode执行：</span><br><span class="line">Runtime: 4 ms, faster than 5.19% of Go online submissions for Valid Parentheses.</span><br><span class="line">Memory Usage: 7 MB, less than 7.32% of Go online submissions for Valid Parentheses.</span><br></pre></td></tr></table></figure><h3 id="解法二：栈"><a href="#解法二：栈" class="headerlink" title="解法二：栈"></a>解法二：栈</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">//考虑空字符串的特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//定义一个栈</span></span><br><span class="line">stack := <span class="built_in">make</span>([]<span class="keyword">int32</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    length := <span class="number">0</span></span><br><span class="line">    <span class="comment">//判断括号是否匹配</span></span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> v == <span class="string">'('</span> || v == <span class="string">'['</span> || v == <span class="string">'&#123;'</span> &#123;</span><br><span class="line">            <span class="comment">//左括号，入栈</span></span><br><span class="line">            stack[length] = v</span><br><span class="line">            length++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//右括号，比较栈顶，匹配则移除，不匹配就返回false</span></span><br><span class="line">            <span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="string">')'</span> &amp;&amp; stack[length<span class="number">-1</span>] == <span class="string">'('</span>) || (v == <span class="string">']'</span> &amp;&amp; stack[length<span class="number">-1</span>] == <span class="string">'['</span>) || (v == <span class="string">'&#125;'</span> &amp;&amp; stack[length<span class="number">-1</span>] == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                length--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn执行：</span><br><span class="line">执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户</span><br><span class="line">内存消耗：2 MB, 在所有 Go 提交中击败了72.86%的用户</span><br><span class="line"></span><br><span class="line">leetcode执行：</span><br><span class="line">Runtime: 0 ms, faster than 100.00% of Go online submissions for Valid Parentheses.</span><br><span class="line">Memory Usage: 2 MB, less than 98.88% of Go online submissions for Valid Parentheses.</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="栈" scheme="https://octopuslian.github.io/tags/%E6%A0%88/"/>
    
      <category term="括号问题" scheme="https://octopuslian.github.io/tags/%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    
      <category term="replace" scheme="https://octopuslian.github.io/tags/replace/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-栈和队列的实现与特性</title>
    <link href="https://octopuslian.github.io/2021/01/22/geekbang-gatc-04-stack-and-queue/"/>
    <id>https://octopuslian.github.io/2021/01/22/geekbang-gatc-04-stack-and-queue/</id>
    <published>2021-01-22T04:57:41.000Z</published>
    <updated>2021-01-22T13:59:42.618Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>想象成一个先入后出的容器：</p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/stack.png" alt></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>像排队，先来先出：</p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/queue.png" alt></p><h2 id="栈和队列关键点"><a href="#栈和队列关键点" class="headerlink" title="栈和队列关键点"></a>栈和队列关键点</h2><ul><li>栈（Stack）：先入后出；添加、删除操作的时间复杂度都为O(1)，查询为O(n)</li><li>队列（Queue）：先入后出；添加、删除操作的时间复杂度都为O(1),查询为O(n)</li></ul><h2 id="双端队列-Double-End-Queue"><a href="#双端队列-Double-End-Queue" class="headerlink" title="双端队列(Double End Queue)"></a>双端队列(Double End Queue)</h2><p>首端和尾端都可以添加、删除元素：</p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/dequeue.png" alt></p><ul><li>简单理解：两端都可以进出的队列；</li><li>插入和删除都是O(1)的操作。</li></ul><h2 id="Stack、Queue、Deque的工程实现"><a href="#Stack、Queue、Deque的工程实现" class="headerlink" title="Stack、Queue、Deque的工程实现"></a>Stack、Queue、Deque的工程实现</h2><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/stack-java.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/queue-java.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/deque-java.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/stack-queue-python.png" alt></p><h2 id="优先队列-Priority-Queue"><a href="#优先队列-Priority-Queue" class="headerlink" title="优先队列(Priority Queue)"></a>优先队列(Priority Queue)</h2><ul><li>插入操作：O(1)</li><li>取出操作：O(logN)-按照元素的优先级取出</li><li>底层具体实现的数据结构较为多样和复杂：heap、bst、treap</li></ul><h2 id="Java源码分析"><a href="#Java源码分析" class="headerlink" title="Java源码分析"></a>Java源码分析</h2><p><a href="http://developer.classpath.org/doc/java/util/Stack-source.html" target="_blank" rel="noopener">Stack-source Java</a></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/fuzadu.png" alt></p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li>1，用新的api-addfirst,addlast去改写</li><li>2，分析Queue，Priority Queue源码</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Stack.html" target="_blank" rel="noopener">Stack Java 12 doc</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The Stack class represents a last-in-first-out (LIFO) stack of objects. It extends class Vector with five operations that allow a vector to be treated as a stack. The usual push and pop operations are provided, as well as a method to peek at the top item on the stack, a method to test for whether the stack is empty, and a method to search the stack for an item and discover how far it is from the top.</span><br><span class="line">When a stack is first created, it contains no items.</span><br><span class="line"></span><br><span class="line">A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example:</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/PriorityQueue.html" target="_blank" rel="noopener">Priority Queue Java 12 doc</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="数据结构" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="队列" scheme="https://octopuslian.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="https://octopuslian.github.io/tags/%E6%A0%88/"/>
    
      <category term="优先队列" scheme="https://octopuslian.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="双端队列" scheme="https://octopuslian.github.io/tags/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>迁移Hexo博客的方案</title>
    <link href="https://octopuslian.github.io/2021/01/15/hexo-blog-move-new-res-solution/"/>
    <id>https://octopuslian.github.io/2021/01/15/hexo-blog-move-new-res-solution/</id>
    <published>2021-01-15T04:00:05.000Z</published>
    <updated>2021-01-15T04:17:41.928Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为买了一台新电脑，所以需要将旧电脑上本地的<code>Hexo</code>文件夹迁移到新的电脑上来，写以此文记录迁移<code>Hexo</code>的过程。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="第一步，在新电脑上搭建Hexo的环境"><a href="#第一步，在新电脑上搭建Hexo的环境" class="headerlink" title="第一步，在新电脑上搭建Hexo的环境"></a>第一步，在新电脑上搭建Hexo的环境</h3><p>安装<code>node</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure><p>安装<code>npm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y npm</span><br></pre></td></tr></table></figure><p>安装<code>hexo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后试试<code>hexo -v</code>，看看是否安装成功，如果成功，应该有以下显示：</p><p><img src="/2021/01/15/hexo-blog-move-new-res-solution/hexo-v.png" alt></p><h3 id="第二步，复制旧电脑上的Hexo文件夹到新电脑上"><a href="#第二步，复制旧电脑上的Hexo文件夹到新电脑上" class="headerlink" title="第二步，复制旧电脑上的Hexo文件夹到新电脑上"></a>第二步，复制旧电脑上的<code>Hexo</code>文件夹到新电脑上</h3><h3 id="第三步，使用命令测试本地能否将博客页面渲染成功"><a href="#第三步，使用命令测试本地能否将博客页面渲染成功" class="headerlink" title="第三步，使用命令测试本地能否将博客页面渲染成功"></a>第三步，使用命令测试本地能否将博客页面渲染成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>如果渲染成功，应该可以在<code>http://localhost:4000</code>上看到自己的博客页面：</p><p><img src="/2021/01/15/hexo-blog-move-new-res-solution/hexo-page.png" alt></p><h3 id="第四步，推送到远程仓库"><a href="#第四步，推送到远程仓库" class="headerlink" title="第四步，推送到远程仓库"></a>第四步，推送到远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>至此，<code>Hexo</code>博客的迁移就做完了。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h
      
    
    </summary>
    
    
      <category term="Solution-notes" scheme="https://octopuslian.github.io/categories/Solution-notes/"/>
    
    
      <category term="Hexo" scheme="https://octopuslian.github.io/tags/Hexo/"/>
    
      <category term="迁移" scheme="https://octopuslian.github.io/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="Blog" scheme="https://octopuslian.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>今天我换了一台新电脑</title>
    <link href="https://octopuslian.github.io/2021/01/13/i-get-a-new-computer-today/"/>
    <id>https://octopuslian.github.io/2021/01/13/i-get-a-new-computer-today/</id>
    <published>2021-01-13T14:18:12.000Z</published>
    <updated>2021-01-13T14:20:01.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><p>今天换了一台新电脑，替代我那用了六年之久的Dell灵越笔记本电脑。</p><p>最新的intel CPU+512G固态硬盘+16G内存+4G独显，外加价位合适，所以立马入手。</p><p>另外宏碁的标志acer，让我想起大学参加竞赛时候ac一道道题目的感觉，ac+er也更好合适，工程师的工作不就是ac一个接一个的问题吗？</p><p>所以后期打算如何规划呢？</p><ul><li><p>安装Visual Studio，把图形学搞一下，正好有个关于DirectX的项目顺便做了；</p></li><li><p>务实基础，算法、数据结构、网络和操作系统；</p></li><li><p>每周尝试在Medium上翻译一篇技术文章；</p></li><li><p>准备软考中级网络工程师；</p></li><li><p>学习理财，边学习理论边在蚂蚁财富上进行实践；</p></li><li><p>开始整理LeetCode、LintCode、牛客网和面试书籍上的题解；</p></li><li><p>整理常考面试题；</p></li><li><p>坚持锻炼，早睡早起。</p></li></ul><p>GOOD LUCK ^_^</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天换了一台新电脑，替代我那用了六年之久的Dell灵越笔记本电脑。&lt;/p&gt;&lt;p&gt;最新的intel CPU+512G固态硬盘+
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="电脑" scheme="https://octopuslian.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
      <category term="换新" scheme="https://octopuslian.github.io/tags/%E6%8D%A2%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>2021读书计划</title>
    <link href="https://octopuslian.github.io/2021/01/02/2021-read-books-plan/"/>
    <id>https://octopuslian.github.io/2021/01/02/2021-read-books-plan/</id>
    <published>2021-01-02T07:51:56.000Z</published>
    <updated>2021-01-02T08:02:34.292Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --><p>2020年，我利用上下班和等车时间，读了很多书，发现时间虽然碎片，有时看不起眼的3-5分钟，其实如果加以利用的话，就是200-300秒的思考时间，将这几百秒的时间乘以每天十几个时间碎片片段，也是一块不小的时间空隙呢。</p><p>当然碎片化也不好，就是不能集中注意力，也许看了第三章，打断阅读后再回过头来已经忘记了第一章节的内容，因此我个人建议可以给每一章末尾或印象深刻的段落加上笔记，这样当我看到我写过的东西，就会立刻回想起原先的内容。</p><p>下面是我利用思维导图工具制定的一份2021阅读计划，希望年底前可以完成它。</p><p>GOOD LUCK.</p><p><img src="/2021/01/02/2021-read-books-plan/2021-book-plan.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 13 2021 21:37:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;2020年，我利用上下班和等车时间，读了很多书，发现时间虽然碎片，有时看不起眼的3-5分钟，其实如果加以利用的话，就是200
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="计划" scheme="https://octopuslian.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="读书" scheme="https://octopuslian.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="阅读" scheme="https://octopuslian.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="豆瓣TOP250" scheme="https://octopuslian.github.io/tags/%E8%B1%86%E7%93%A3TOP250/"/>
    
  </entry>
  
</feed>
