<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>以写作调身心</title>
  
  <subtitle>熟能生巧，勤能补拙；念念不忘，必有回响。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://octopuslian.github.io/"/>
  <updated>2021-02-06T13:12:03.651Z</updated>
  <id>https://octopuslian.github.io/</id>
  
  <author>
    <name>Neo Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你这么一棒子把人打死,难道不嫌太武断了吗?</title>
    <link href="https://octopuslian.github.io/2021/02/06/please-dont-discriminate-geographically/"/>
    <id>https://octopuslian.github.io/2021/02/06/please-dont-discriminate-geographically/</id>
    <published>2021-02-06T13:07:49.000Z</published>
    <updated>2021-02-06T13:12:03.651Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p><a href="https://book.douban.com/subject/3420392/" target="_blank" rel="noopener">《武林高手在校园》</a>这本穿越小说我高中&amp;大学时读了很多遍，也算是我读的第一本穿越小说，有一处印象比较深的情节，在此记录并抒发一下自己的感受。</p><p>内容应该在73-74节之间，当时油老鼠和林逸飞在街上走着，突然碰到一个人骑自行车钱包掉了出来，立马有人过来说见者有份，要平分赃款，而林逸飞早已识破骗局，于是油老鼠也跟着走了，并说了一句“可恶的河南人”，而林逸飞就说出了我印象最深的话： <em>林逸飞叹息道:“哪个地方都有好人,都会有骗子,你这么一棒子把人打死,难道不嫌太武断了吗?”</em></p><p>为什么我会对这句话印象极其深刻呢？——因为我见过太多的地域歧视。</p><p>上大学那会，我的本科舍友们偶尔会在宿舍关灯后还是唠嗑，这时候我就会闭嘴，因为话题真的很无语，比如——他们一直认为四川人的个子都很矮（我只想说如果都很矮那难道像CBA这种篮球比赛四川队都垫底吗？）；偷井盖子的都是河南人；广东人做的东西不要吃；….等等这种带着地域的偏见。</p><p>然而，当我毕业后，在成都拿了一家互联网公司的offer后，我发现四川当地人并不矮，地铁上、公交车上到处都是高个子；我在部门认识的河南同事都非常乐于助人，有时会停下手里的活帮我来看代码问题；广东的肠粉路边摊到处都是…所以，我学会了怀疑别人说的话，同时也建立了一个前提：哪个地方都有好人,都会有骗子，不能因为这地方出现了这件事情，就把这个地方的人一棍子打死。</p><p>而我也分析了为什么会出现这种现象呢？我罗列了以下原因：</p><ul><li>读书少，没有自己的思想，都是道听途说，别人说什么就信什么；</li><li>媒体作用，总是喜欢把一个地方发生的事件扩大影响，然后再举例子说前多少年也发生类似事件以及水军的无脑附和；</li><li>推荐算法的作用，你倾向于看到什么，算法就会帮你搜集你想看到的，久而久之内心就会产生一种潜意识；</li></ul><p>我很庆幸我生活在一个交通便利的时代，可以到处旅游，见识各地的饮食和风土人情以及方言，所以——写这篇文章也是项表达自己的心声：没事千万不要给不熟悉的地域打上标签，你这么一棒子把人打死,难道不嫌太武断了吗?</p><p>最后引用一下这句话的完整内容，我非常喜欢这段^_^</p><blockquote><p>“可恶的河南人。”油老鼠摇头晃脑的来了这么一句。<br>林逸飞一愣,“为什么这么说?”<br>“刚才那两个就是本地人,可不就是河南人,他们专找外地的旅客下手行骗的。”油老鼠恨恨的说道:“我对河南人向来没有什么好感,再说现在社会也有很多关于河南人的劣迹。” 林逸飞叹息道:“哪个地方都有好人,都会有骗子,你这么一棒子把人打死,难道不嫌太武断了吗?”<br>油老鼠本来想要反驳,突然看到林逸飞的脸色有些沉郁,终于还是嘴边的话咽了回去,点头装作同意道:“林老弟说的是。”<br>看着油老鼠言不由衷的样子,林逸飞苦笑一声,也不再说什么,油老鼠当然不知道,萧别离最尊敬的一个人就是岳元帅,而岳飞偏偏就是河南汤阴人! 从文化意义上来讲,河南实在是一块中国人无法忽视的地域,泱泱大国,千年的华夏文明,正是从这块黄土地发源流淌。<br>这里有着道家的先祖老庄,“外示会儒术,内尊黄道”八个字,为无数的统治者心照不暄的运用,有着墨家的创始人墨翟。提出了意义非凡的‘兼爱’,‘非攻’口号,可以算是最早地和平主义倡导者,有着:;风萧萧兮易水寒,壮士一去兮不复返‘伯侠士荆轲。差一点就凭借手中的宝剑改写了历史,更有着千古传诵,万人景仰的尽忠报国的岳武穆,凭借一腔热血扛起了那面风雨飘摇中地反金大旗! 以悲凉的歌声唱出‘新鬼烦冤旧鬼哭,天阴雨湿声啾啾’这等同情孤苦百姓诗词的杜甫是河南人,写出‘春心莫共花争发,一寸相思一寸灰!’这等华美语句的李商隐也是河南人,那个千百年来的造福苍生的医圣张仲景还是河南人! 而这些不过是河南数不胜数名人中的几个。河南,实在在中国的文明史上留下了不可磨灭地重重烙印,可是如今的人们记住了什么?! 河南人这个本来应该让人骄傲自豪的三个字。正在让人肆无忌惮地嘲笑,毫无顾忌的践踏。这实在是一种文化地悲哀,也是一种‘流言运动’的恶果,更是我们民族整体的悲哀! 在这里,新闻媒体,网络媒介无疑要深刻的反省一下,那些网络推波助澜的也应该停止这种可悲的附和的附和。当你在践踏嘲笑地时候,无疑那点仅存的文明也被你亲手摧毁。<br>“没有谁会比别人高出一等!”林逸飞突然叹息道:“<em>每个人都有尊严,当你认为高出别人一等的时候,我认为,那才是可悲的事情</em>。”<br>油老鼠咀嚼着林逸飞的话,一时竟然有些出神,这难道仅仅是个学生,他实在有着太多当代学生缺乏的东西。</p></blockquote><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/3420392/&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="Review-book" scheme="https://octopuslian.github.io/categories/Review-book/"/>
    
    
      <category term="歧视" scheme="https://octopuslian.github.io/tags/%E6%AD%A7%E8%A7%86/"/>
    
      <category term="地域" scheme="https://octopuslian.github.io/tags/%E5%9C%B0%E5%9F%9F/"/>
    
      <category term="武断" scheme="https://octopuslian.github.io/tags/%E6%AD%A6%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-14-longest-common-prefix | 最长公共前缀</title>
    <link href="https://octopuslian.github.io/2021/02/06/leetcode-14-longest-common-prefix/"/>
    <id>https://octopuslian.github.io/2021/02/06/leetcode-14-longest-common-prefix/</id>
    <published>2021-02-06T12:54:40.000Z</published>
    <updated>2021-02-06T12:55:41.783Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode-cn</a></p><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line">0 &lt;= strs.length &lt;= 200</span><br><span class="line">0 &lt;= strs[i].length &lt;= 200</span><br><span class="line">strs[i] consists of only lower-case English letters.</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题目的简单描述就是找一堆字符串的相同前缀，比如<code>flower</code>、<code>flow</code>、<code>flight</code>，发现每个字符串都有前缀<code>fl</code>，于是就将<code>fl</code>返回即可，本题就是要实现这样一个在字符串数组中找最长前缀的函数。</p><h3 id="解法一：暴力"><a href="#解法一：暴力" class="headerlink" title="解法一：暴力"></a>解法一：暴力</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">//排除特殊情况</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">res := strs[<span class="number">0</span>]               <span class="comment">//获取字符串数组里的第一个元素</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> strs[<span class="number">1</span>:] &#123; <span class="comment">//从字符串数组第二个元素开始遍历</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(v) &amp;&amp; i &lt; <span class="built_in">len</span>(res); i++ &#123; <span class="comment">//遍历两数组里的元素</span></span><br><span class="line"><span class="keyword">if</span> res[i] != v[i] &#123; <span class="comment">//做判断，如果不相等</span></span><br><span class="line"><span class="keyword">break</span> <span class="comment">//直接结束循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = res[:i]</span><br><span class="line"><span class="keyword">if</span> res == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res <span class="comment">//返回空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种相似解法，会用到<a href="https://golang.org/pkg/strings/#Index" target="_blank" rel="noopener">strings.Index</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) &lt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    prefix := strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _,k := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        <span class="keyword">for</span> strings.Index(k,prefix) != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(prefix) == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">            prefix = prefix[:<span class="built_in">len</span>(prefix) - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefix</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">力扣：</span><br><span class="line">执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户</span><br><span class="line">内存消耗：2.3 MB, 在所有 Go 提交中击败了55.76%的用户</span><br><span class="line"></span><br><span class="line">leetcode：</span><br><span class="line">Runtime: 0 ms, faster than 100.00% of Go online submissions for Longest Common Prefix.</span><br><span class="line">Memory Usage: 2.4 MB, less than 100.00% of Go online submissions for Longest Common Prefix.</span><br></pre></td></tr></table></figure><h2 id="参考题解"><a href="#参考题解" class="headerlink" title="参考题解"></a>参考题解</h2><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/solution/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/" target="_blank" rel="noopener">力扣官方题解-5种解法</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="字符串" scheme="https://octopuslian.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="暴力" scheme="https://octopuslian.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-13-roman-to-integer | 罗马数字转整数</title>
    <link href="https://octopuslian.github.io/2021/02/05/leetcode-13-roman-to-integer/"/>
    <id>https://octopuslian.github.io/2021/02/05/leetcode-13-roman-to-integer/</id>
    <published>2021-02-05T15:39:46.000Z</published>
    <updated>2021-02-06T12:58:32.597Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="noopener">LeetCode</a><br><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">力扣</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先维护一个<code>map</code>，用于建立罗马数字和整数的关系，接着挨个破译即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> charToIntMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>, <span class="number">8</span>)</span><br><span class="line">    charToIntMap[<span class="string">'I'</span>] = <span class="number">1</span></span><br><span class="line">    charToIntMap[<span class="string">'V'</span>] = <span class="number">5</span></span><br><span class="line">    charToIntMap[<span class="string">'X'</span>] = <span class="number">10</span></span><br><span class="line">    charToIntMap[<span class="string">'L'</span>] = <span class="number">50</span></span><br><span class="line">    charToIntMap[<span class="string">'C'</span>] = <span class="number">100</span></span><br><span class="line">    charToIntMap[<span class="string">'D'</span>] = <span class="number">500</span></span><br><span class="line">    charToIntMap[<span class="string">'M'</span>] = <span class="number">1000</span></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> s[i] &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; (s[i+<span class="number">1</span>] == <span class="string">'V'</span> || s[i+<span class="number">1</span>] == <span class="string">'X'</span>) &#123;</span><br><span class="line">                sum -= charToIntMap[s[i]]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += charToIntMap[s[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; (s[i+<span class="number">1</span>] == <span class="string">'L'</span> || s[i+<span class="number">1</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">                sum -= charToIntMap[s[i]]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += charToIntMap[s[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; (s[i+<span class="number">1</span>] == <span class="string">'D'</span> || s[i+<span class="number">1</span>] == <span class="string">'M'</span>) &#123;</span><br><span class="line">                sum -= charToIntMap[s[i]]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += charToIntMap[s[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            sum += charToIntMap[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leetcode-cn执行：</span><br><span class="line">执行用时：16 ms, 在所有 Go 提交中击败了22.55%的用户</span><br><span class="line">内存消耗：3.1 MB, 在所有 Go 提交中击败了78.12%的用户</span><br><span class="line"></span><br><span class="line">leetcode执行：</span><br><span class="line">Runtime: 8 ms, faster than 64.36% of Go online submissions for Roman to Integer.</span><br><span class="line">Memory Usage: 3.1 MB, less than 100.00% of Go online submissions for Roman to Integer.</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="数字转换" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>6次提交完善Github个人简介</title>
    <link href="https://octopuslian.github.io/2021/02/01/six-github-commits-update-my-github-readme/"/>
    <id>https://octopuslian.github.io/2021/02/01/six-github-commits-update-my-github-readme/</id>
    <published>2021-02-01T14:55:01.000Z</published>
    <updated>2021-02-01T15:03:57.621Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p>半年前意外看到了阿里巴巴半霜大佬的<code>Github</code>个人界面，甚是喜欢，今天晚上我利用了一个半小时的时间查资料分析代码，，地址点<a href="https://github.com/OctopusLian" target="_blank" rel="noopener">这里</a></p><p>个人觉得一个好的<code>Github</code>页面应该包含以下内容：</p><ul><li>简短的个人介绍</li><li>最近的学习情况和期待完成的事</li><li>社交&amp;其他技术网站链接</li><li>常用的软件和编程语言</li><li><code>Github</code>信息，包括star数、commit次数、PRs等</li><li>项目列表</li></ul><p>以上，是我完成这次个人<code>README</code>的动力。</p><p>最后我想说，前端还是很有趣的，有空一定要系统学习一下^_^</p><p><a href="https://www.cnblogs.com/xueweihan/p/13441511.html" target="_blank" rel="noopener">【译】10 款国外实用、有趣的 GitHub 简介 README</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;半年前意外看到了阿里巴巴半霜大佬的&lt;code&gt;Github&lt;/code&gt;个人界面，甚是喜欢，今天晚上我利用了一个半小时的时间
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="github" scheme="https://octopuslian.github.io/tags/github/"/>
    
      <category term="简介" scheme="https://octopuslian.github.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
      <category term="README" scheme="https://octopuslian.github.io/tags/README/"/>
    
  </entry>
  
  <entry>
    <title>开课吧直播_C/C++开发实战3天训练营</title>
    <link href="https://octopuslian.github.io/2021/01/29/kaikeba-live-cpp-dev-3days-act-tc/"/>
    <id>https://octopuslian.github.io/2021/01/29/kaikeba-live-cpp-dev-3days-act-tc/</id>
    <published>2021-01-29T11:37:53.000Z</published>
    <updated>2021-02-01T15:10:02.850Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="直播老师"><a href="#直播老师" class="headerlink" title="直播老师"></a>直播老师</h2><p>胡光，船长。</p><p>(由于这个课程就是讲解一个<code>Google</code>的测试框架，在此不做详细描述，主要是对直播课的一些有用的问题做记录)</p><h2 id="面试题1-一个数变为二进制后有多少个1？"><a href="#面试题1-一个数变为二进制后有多少个1？" class="headerlink" title="面试题1-一个数变为二进制后有多少个1？"></a>面试题1-一个数变为二进制后有多少个1？</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法一：位运算  </span></span><br><span class="line"><span class="comment">//运算次数32次</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_cnt_v1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; (<span class="number">1</span> &lt;&lt; i)) cnt += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法二：while循环，借位</span></span><br><span class="line"><span class="comment">//运算次数16次</span></span><br><span class="line"><span class="keyword">int</span> count_cnt_v2(<span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        x = x &amp; (x - <span class="number">1</span>);</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法三：分组统计法</span></span><br><span class="line"><span class="comment">//运算次数8次</span></span><br><span class="line"><span class="keyword">int</span> arr_cnt[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count_cnt_v3(<span class="keyword">int</span> x)&#123;</span><br><span class="line">     <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">         cnt += arr_cnt[(x &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">0xf</span>];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法四：字符串取位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_cnt_v4</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">         cnt += <span class="string">"0\1\1\2\1\2\2\3\1\2\3\3\2\3\3\4"</span>[(x &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">0xf</span>];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法五：分统计法</span></span><br><span class="line"><span class="comment">//运算次数5次</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_cnt_v5</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    x = (x &amp; <span class="number">0</span>x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="百度面试要求"><a href="#百度面试要求" class="headerlink" title="百度面试要求"></a>百度面试要求</h2><p><img src="/2021/01/29/kaikeba-live-cpp-dev-3days-act-tc/baidu1.png" alt></p><h2 id="撸代码-快速排序"><a href="#撸代码-快速排序" class="headerlink" title="撸代码-快速排序"></a>撸代码-快速排序</h2><ul><li>第一步：选择基准值；</li><li>第二步：partition</li><li>第三步：递归调度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版本一</span></span><br><span class="line"><span class="comment">//2404ms</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_v1</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> x = l,y = z,z = arr[l];</span><br><span class="line">    <span class="keyword">while</span>(x &lt; y) &#123;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y &amp;&amp; arr[y] &gt;= z) --y;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; y) arr[x++] = arr[y];</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y &amp;&amp; arr[x] &lt;= z) ++x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//版本二：单边递归法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//版本三：无监督的算法优化思想</span></span><br></pre></td></tr></table></figure><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="为什么C-难学？"><a href="#为什么C-难学？" class="headerlink" title="为什么C++难学？"></a>为什么C++难学？</h3><p>C++支持四种编程范式：</p><ul><li>面向过程的编程范式</li><li>面向对象的编程范式</li><li>泛型编程，模板</li><li>函数式编程</li></ul><p>C++是一门极其考验技术想象力的编程语言。所以一定要学好C语言、算法、操作系统、网络。</p><h3 id="推荐的考试和竞赛"><a href="#推荐的考试和竞赛" class="headerlink" title="推荐的考试和竞赛"></a>推荐的考试和竞赛</h3><ul><li>PAT</li><li>CSP / 蓝桥杯</li><li>ACM</li></ul><h3 id="IDE包含了哪些"><a href="#IDE包含了哪些" class="headerlink" title="IDE包含了哪些"></a>IDE包含了哪些</h3><p>集成环境，集成了很多东西，比如：</p><ul><li>编辑器(vim)</li><li>编译器(g++)</li><li>调试器(gdb)</li></ul><h3 id="什么叫函数的定义？"><a href="#什么叫函数的定义？" class="headerlink" title="什么叫函数的定义？"></a>什么叫函数的定义？</h3><p>能看到函数的实现过程。</p><h3 id="什么叫函数的声明？"><a href="#什么叫函数的声明？" class="headerlink" title="什么叫函数的声明？"></a>什么叫函数的声明？</h3><p>告诉程序有这样一个函数。</p><h3 id="什么是条件式编译？"><a href="#什么是条件式编译？" class="headerlink" title="什么是条件式编译？"></a>什么是条件式编译？</h3><h3 id="什么叫无监督的算法优化思想？"><a href="#什么叫无监督的算法优化思想？" class="headerlink" title="什么叫无监督的算法优化思想？"></a>什么叫无监督的算法优化思想？</h3><p>用插入排序来举例：</p><p>最简单的排序算法，类似插队，一直向前插队</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) &#123; \</span></span><br><span class="line">    __typeof(a) __c = a; \</span><br><span class="line">    a = b, b = _c; \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>;i &lt;= r;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; l &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;  <span class="comment">//重点 j &gt; l 是监督项，防止下标越界</span></span><br><span class="line">            swap(arr[j],arr[j<span class="number">-1</span>]);</span><br><span class="line">            j -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> un</span><br></pre></td></tr></table></figure><h3 id="为什么插入排序要一个一个的往前调整？"><a href="#为什么插入排序要一个一个的往前调整？" class="headerlink" title="为什么插入排序要一个一个的往前调整？"></a>为什么插入排序要一个一个的往前调整？</h3><p>答：为了不破坏稳定性。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;直播老师&quot;&gt;&lt;a href=&quot;#直播老师&quot; class=&quot;headerlink&quot; title=&quot;直播老师&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Share-live" scheme="https://octopuslian.github.io/categories/Share-live/"/>
    
    
      <category term="C++" scheme="https://octopuslian.github.io/tags/C/"/>
    
      <category term="模块编译" scheme="https://octopuslian.github.io/tags/%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-28-implement-strstr | 实现 strStr()</title>
    <link href="https://octopuslian.github.io/2021/01/27/leetcode-28-implement-strstr/"/>
    <id>https://octopuslian.github.io/2021/01/27/leetcode-28-implement-strstr/</id>
    <published>2021-01-27T13:53:52.000Z</published>
    <updated>2021-01-27T13:57:03.625Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-strstr/</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这题最好是用<code>KMP</code>算法来解，但我这先贴出暴力法的解法。</p><h3 id="解法一，暴力法"><a href="#解法一，暴力法" class="headerlink" title="解法一，暴力法"></a>解法一，暴力法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">//考虑特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(haystack) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(needle) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(haystack) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(needle) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(haystack) &lt; <span class="built_in">len</span>(needle) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    len_h := <span class="built_in">len</span>(haystack)  <span class="comment">//字符串haystack的长度</span></span><br><span class="line">    len_n := <span class="built_in">len</span>(needle)  <span class="comment">//字符串needle的长度</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;len_h-len_n+<span class="number">1</span>;i++ &#123;</span><br><span class="line">        j := <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ;j&lt;len_n;j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i+j] != needle[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == len_n) &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="字符串" scheme="https://octopuslian.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="KMP" scheme="https://octopuslian.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>《工作细胞Black》第3集——或许是我见过的最好的性教育动画片</title>
    <link href="https://octopuslian.github.io/2021/01/25/work-cell-black-3-erection/"/>
    <id>https://octopuslian.github.io/2021/01/25/work-cell-black-3-erection/</id>
    <published>2021-01-25T12:43:12.000Z</published>
    <updated>2021-01-27T05:32:40.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="第3集剧情简介"><a href="#第3集剧情简介" class="headerlink" title="第3集剧情简介"></a>第3集剧情简介</h2><p>周末跟完了《工作细胞 BLACK》的最新剧集，第三集的剧情给我留下了非常深刻的印象，因为它触碰到了我上小学和中学的知识禁区——性行为。</p><p>第3集的大致剧情是一群红细胞收到了比运输氧气更重要的任务，就是这具身体因生殖行为而进行兴奋状态，需要红细胞使阴茎中的海绵组织（海绵体）勃起，完成射精！</p><p><img src="/2021/01/25/work-cell-black-3-erection/wcell.png" alt></p><p>但结果非常不顺：刚开始红细胞排成一队进入海绵体，把螺旋动脉张开，血液进去，进入勃起状态，看似一切顺利</p><p><img src="/2021/01/25/work-cell-black-3-erection/tianchong.png" alt></p><p>紧接着<strong>海绵体的环磷酸鸟苷值正在急剧下降，平滑肌的松弛状态已经解除了，原因是环磷酸鸟苷产量不足，似乎是性兴奋无法顺利通过神经传达到阴茎</strong>——感觉好多陌生名词哦，其实简单来说就是“还没有射精，勃起就停止了，这就是ED（勃起功能障碍）”，这样下去人体没办法勃起-&gt;没办法射精-&gt;精细胞和卵细胞就无法相遇形成受精卵-&gt;生命就无法延续下去。感觉情况很糟糕，就在系统都宣布这次勃起任务失败了，局势逆转了：</p><p><strong>海绵体的环磷酸鸟苷值正在急剧上升，原因是外部投入了伟哥，使PDE5（能够分解环磷酸鸟苷的酶）遭到抑制。</strong></p><p><img src="/2021/01/25/work-cell-black-3-erection/weige.png" alt></p><p>最终，血液填充率达到100%-&gt;静脉出口关闭-&gt;阴茎完全勃起了-&gt;收到射精中枢传来的信号，精子们做好射精准备-&gt;射精准备完毕-&gt;收缩尿道括约肌（尿液和精液就不会同时射出，精液进入前列腺后，尿道的出入口就会关闭，然后只打开出口，精液就会因猛烈的压力而射出）-&gt;收缩完毕-&gt;发射-&gt;射精完毕。</p><p><img src="/2021/01/25/work-cell-black-3-erection/jz1.png" alt><br><img src="/2021/01/25/work-cell-black-3-erection/jz2.png" alt></p><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>我依稀记得，我第一次接触性知识是初二的生物课上，课本上画了一幅男性性生殖器官构造图，女性的也有，但当时很害羞就直接盖上了，上课的时候老是讲到这也只是简单说男性的生殖器官是阴茎和睾丸，女性的是子宫，它们分别产生精细胞和暖细胞，好了记到这吧，考试不会超出这范围。</p><p>我当时对生物非常感兴趣，总是好奇生命是如何产生的。</p><p>直到有节健康课，老师放了一段受精卵形成的过程，好多精子奔向卵子，我才对理解了一些，高中对这块的知识会在受精后的变化加大考查和分值，而对于为什么有些人性行为的时候要用伟哥，射精前身体要做哪些准备，我都不知道，当然考试也不会考。</p><p>非常感谢这部动漫，让我更形象的看到生命延续的全部过程，也让我更加爱惜自己的身体，拒绝修996福报！！！</p><p>最后我想说，性不应该是洪水猛兽，如果对性这块懵懂的朋友，我非常推荐看这部剧，就从第3集来说，是我目前看到的非常棒的性教育动画片！</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;第3集剧情简介&quot;&gt;&lt;a href=&quot;#第3集剧情简介&quot; class=&quot;headerlink&quot; title=&quot;第3集
      
    
    </summary>
    
    
      <category term="Review-film" scheme="https://octopuslian.github.io/categories/Review-film/"/>
    
    
      <category term="工作细胞" scheme="https://octopuslian.github.io/tags/%E5%B7%A5%E4%BD%9C%E7%BB%86%E8%83%9E/"/>
    
      <category term="勃起" scheme="https://octopuslian.github.io/tags/%E5%8B%83%E8%B5%B7/"/>
    
      <category term="性教育" scheme="https://octopuslian.github.io/tags/%E6%80%A7%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-深度优先搜索、广度优先搜索的实现和特性</title>
    <link href="https://octopuslian.github.io/2021/01/23/geekbang-gatc-09-dfs-and-bfs/"/>
    <id>https://octopuslian.github.io/2021/01/23/geekbang-gatc-09-dfs-and-bfs/</id>
    <published>2021-01-23T13:05:22.000Z</published>
    <updated>2021-01-23T13:51:26.457Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="搜索-遍历"><a href="#搜索-遍历" class="headerlink" title="搜索-遍历"></a>搜索-遍历</h2><ul><li>每个节点都要访问一次</li><li>每个节点仅仅要访问一次（不做无用功）</li><li>对于节点的访问顺序不限：dfs / bfs</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="DFS算法模板"><a href="#DFS算法模板" class="headerlink" title="DFS算法模板"></a>DFS算法模板</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">in</span> visited:</span><br><span class="line">        <span class="comment"># already visited</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    visited.add(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># process current node</span></span><br><span class="line">    <span class="comment"># ... logic here</span></span><br><span class="line"></span><br><span class="line">    dfs(node.left)</span><br><span class="line">    dfs(node.right)</span><br></pre></td></tr></table></figure><h3 id="DFS代码-递归写法"><a href="#DFS代码-递归写法" class="headerlink" title="DFS代码-递归写法"></a>DFS代码-递归写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">visited = set()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node,visited)</span>:</span></span><br><span class="line">    visited.add(node)</span><br><span class="line">    <span class="comment"># process current node here</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> next_node <span class="keyword">in</span> node.children():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_node <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(next node,visited)</span><br></pre></td></tr></table></figure><h3 id="DFS代码-非递归写法"><a href="#DFS代码-非递归写法" class="headerlink" title="DFS代码-非递归写法"></a>DFS代码-非递归写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self,tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    visited,stack = [].[tree.root]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line"></span><br><span class="line">        process(node)</span><br><span class="line">        nodes = generagte_related_nodes(node)</span><br><span class="line">        stack.push(nodes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># other processing work</span></span><br></pre></td></tr></table></figure><h3 id="BFS代码"><a href="#BFS代码" class="headerlink" title="BFS代码"></a>BFS代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(graph,start,end)</span>:</span></span><br><span class="line">    queue = []</span><br><span class="line">    queue.append([start])</span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line"></span><br><span class="line">        process(node)</span><br><span class="line">        nodes = generagte_related_nodes(node)</span><br><span class="line">        queue.push(nodes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># other processing work</span></span><br></pre></td></tr></table></figure><h2 id="DFS和BFS遍历顺序"><a href="#DFS和BFS遍历顺序" class="headerlink" title="DFS和BFS遍历顺序"></a>DFS和BFS遍历顺序</h2><p><img src="/2021/01/23/geekbang-gatc-09-dfs-and-bfs/shunxu.png" alt></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://visualgo.net/en" target="_blank" rel="noopener">https://visualgo.net/en</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;搜索-遍历&quot;&gt;&lt;a href=&quot;#搜索-遍历&quot; class=&quot;headerlink&quot; title=&quot;搜索-遍历&quot;&gt;
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="BFS" scheme="https://octopuslian.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="https://octopuslian.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-分治、回溯的实现和特性</title>
    <link href="https://octopuslian.github.io/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/"/>
    <id>https://octopuslian.github.io/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/</id>
    <published>2021-01-23T06:34:59.000Z</published>
    <updated>2021-01-23T13:13:00.844Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="分治的思想"><a href="#分治的思想" class="headerlink" title="分治的思想"></a>分治的思想</h2><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/digui-tree.png" alt></p><p>本质就是<strong>找重复性和分解问题，以及最后组合每个子问题的结果。</strong></p><p>例如：</p><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/divide.png" alt></p><p>代码模板：</p><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/divide-code.png" alt></p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>百度百科解释：</p><p><img src="/2021/01/23/geekbang-gatc-08-divide-conquer-and-backtracking/back-baidu.png" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;分治的思想&quot;&gt;&lt;a href=&quot;#分治的思想&quot; class=&quot;headerlink&quot; title=&quot;分治的思想&quot;&gt;
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="递归" scheme="https://octopuslian.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="回溯" scheme="https://octopuslian.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="分治" scheme="https://octopuslian.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>LeetBook-binary-search | 二分查找</title>
    <link href="https://octopuslian.github.io/2021/01/23/leetcode-leetbook-binary-search/"/>
    <id>https://octopuslian.github.io/2021/01/23/leetcode-leetbook-binary-search/</id>
    <published>2021-01-23T03:31:46.000Z</published>
    <updated>2021-01-23T09:51:13.664Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="它是如何工作的？"><a href="#它是如何工作的？" class="headerlink" title="它是如何工作的？"></a>它是如何工作的？</h2><p>在最简单的形式中，二分查找对具有指定左索引和右索引的连续序列进行操作。这就是所谓的查找空间。二分查找维护查找空间的左、右和中间指示符，并比较查找目标或将查找条件应用于集合的中间值；如果条件不满足或值不相等，则清除目标不可能存在的那一半，并在剩下的一半上继续查找，直到成功为止。如果查以空的一半结束，则无法满足条件，并且无法找到目标。</p><h2 id="LC二分查找"><a href="#LC二分查找" class="headerlink" title="LC二分查找"></a>LC二分查找</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">你可以假设 nums 中的所有元素是不重复的。</span><br><span class="line">n 将在 [1, 10000]之间。</span><br><span class="line">nums 的每个元素都将在 [-9999, 9999]之间。</span><br></pre></td></tr></table></figure><h3 id="Golang代码"><a href="#Golang代码" class="headerlink" title="Golang代码"></a>Golang代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    high := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">        mid := low + (high - low) / <span class="number">2</span></span><br><span class="line">        midValue := nums[mid]</span><br><span class="line">        <span class="keyword">if</span> midValue == target &#123;</span><br><span class="line">            <span class="comment">//target值存在，返回下标</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> midValue &gt; target&#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找模板分析"><a href="#二分查找模板分析" class="headerlink" title="二分查找模板分析"></a>二分查找模板分析</h2><p>你在网上看到的 99% 的二分查找问题会归结于这 3 个模板中的一个。有些问题可以使用多个模板来实现，但是当你做更多的练习时，你会注意到一些模板比其他模板更适合某些问题。</p><p><img src="/2021/01/23/leetcode-leetbook-binary-search/muban.png" alt></p><p>这三个模板不同之处在于：</p><ul><li>左、中、右索引的分配。</li><li>循环或递归终止条件。</li><li>后处理的必要性。</li></ul><p>模板 #1 和 #3 是最常用的，几乎所有二分查找问题都可以用其中之一轻松实现。模板 #2 更 高级一些，用于解决某些类型的问题。</p><h3 id="模板-1-left-lt-right"><a href="#模板-1-left-lt-right" class="headerlink" title="模板 #1 (left &lt;= right)"></a>模板 #1 (left &lt;= right)</h3><ul><li>二分查找的最基础和最基本的形式。</li><li>查找条件可以在不与元素的两侧进行比较的情况下确定（或使用它周围的特定元素）。</li><li>不需要后处理，因为每一步中，你都在检查是否找到了元素。如果到达末尾，则知道未找到该元素。</li></ul><h3 id="模板-2-left-lt-right"><a href="#模板-2-left-lt-right" class="headerlink" title="模板 #2 (left &lt; right)"></a>模板 #2 (left &lt; right)</h3><ul><li>一种实现二分查找的高级方法。</li><li>查找条件需要访问元素的直接右邻居。</li><li>使用元素的右邻居来确定是否满足条件，并决定是向左还是向右。</li><li>保证查找空间在每一步中至少有 2 个元素。</li><li>需要进行后处理。 当你剩下 1 个元素时，循环 / 递归结束。 需要评估剩余元素是否符合条件。</li></ul><h3 id="模板-3-left-1-lt-right"><a href="#模板-3-left-1-lt-right" class="headerlink" title="模板 #3 (left + 1 &lt; right)"></a>模板 #3 (left + 1 &lt; right)</h3><ul><li>实现二分查找的另一种方法。</li><li>搜索条件需要访问元素的直接左右邻居。</li><li>使用元素的邻居来确定它是向右还是向左。</li><li>保证查找空间在每个步骤中至少有 3 个元素。</li><li>需要进行后处理。 当剩下 2 个元素时，循环 / 递归结束。 需要评估其余元素是否符合条件。</li></ul><h2 id="时间和空间复杂度："><a href="#时间和空间复杂度：" class="headerlink" title="时间和空间复杂度："></a>时间和空间复杂度：</h2><p>时间：O(log n) —— 算法时间</p><p>因为二分查找是通过对查找空间中间的值应用一个条件来操作的，并因此将查找空间折半，在更糟糕的情况下，我们将不得不进行 O(log n) 次比较，其中 n 是集合中元素的数目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为什么是 log n？</span><br><span class="line"></span><br><span class="line">二分查找是通过将现有数组一分为二来执行的。</span><br><span class="line">因此，每次调用子例程(或完成一次迭代)时，其大小都会减少到现有部分的一半。</span><br><span class="line">首先 N 变成 N/2，然后又变成 N/4，然后继续下去，直到找到元素或尺寸变为 1。</span><br><span class="line">迭代的最大次数是 log N (base 2) 。</span><br></pre></td></tr></table></figure><p>空间：O(1) —— 常量空间</p><p>虽然二分查找确实需要跟踪 3 个指标，但迭代解决方案通常不需要任何其他额外空间，并且可以直接应用于集合本身，因此需要 O(1) 或常量空间。</p><p>注：以上内容来自LeetCode-cn中的LeetBook内容。</p><p>希望通过今天的学习可以入门了解二分查找。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;它是如何工作的？&quot;&gt;&lt;a href=&quot;#它是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;它
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="二分查找" scheme="https://octopuslian.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-哈希表、映射、集合的实现与特性</title>
    <link href="https://octopuslian.github.io/2021/01/22/geekbang-gatc-05-hashmap-and-set/"/>
    <id>https://octopuslian.github.io/2021/01/22/geekbang-gatc-05-hashmap-and-set/</id>
    <published>2021-01-22T13:45:13.000Z</published>
    <updated>2021-01-22T14:00:27.164Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="哈希表（Hash-Table）"><a href="#哈希表（Hash-Table）" class="headerlink" title="哈希表（Hash Table）"></a>哈希表（Hash Table）</h2><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-table.png" alt></p><p>工程实践：电话号码簿、用户信息表、缓存（LRU Cache）、键值对存储（Redis）。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>哈希函数：<br><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-func.png" alt></p><p>哈希碰撞：<br><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-collisions.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/hash-collisions2.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/wanzheng.png" alt></p><h2 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h2><p><img src="/2021/01/22/geekbang-gatc-05-hashmap-and-set/map-set.png" alt></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Set.html" target="_blank" rel="noopener">Set Java 12 doc</a></p><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Map.html" target="_blank" rel="noopener">Map Java 12 doc</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;哈希表（Hash-Table）&quot;&gt;&lt;a href=&quot;#哈希表（Hash-Table）&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="哈希表" scheme="https://octopuslian.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="映射" scheme="https://octopuslian.github.io/tags/%E6%98%A0%E5%B0%84/"/>
    
      <category term="集合" scheme="https://octopuslian.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-20-valid-parentheses | 有效的括号</title>
    <link href="https://octopuslian.github.io/2021/01/22/leetcode-20-valid-parentheses/"/>
    <id>https://octopuslian.github.io/2021/01/22/leetcode-20-valid-parentheses/</id>
    <published>2021-01-22T09:09:19.000Z</published>
    <updated>2021-01-22T11:48:45.365Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses/</a></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>栈数据结构的经典例题。</p><h3 id="思路一，暴力法"><a href="#思路一，暴力法" class="headerlink" title="思路一，暴力法"></a>思路一，暴力法</h3><p>将()、[]、{}这样出现的全部替换为空，最后再做一下判断即可。</p><h3 id="思路二，栈"><a href="#思路二，栈" class="headerlink" title="思路二，栈"></a>思路二，栈</h3><ul><li><p>So，为什么这道题可以用栈来解决？</p></li><li><p>什么类型的题可以用栈解决？<br>题目抽象出来像洋葱一样的结构，具有扩散性，由内向外或者由外向内，并且一对一对的出现。</p></li></ul><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="栈" scheme="https://octopuslian.github.io/tags/%E6%A0%88/"/>
    
      <category term="括号问题" scheme="https://octopuslian.github.io/tags/%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>算法训练营-栈和队列的实现与特性</title>
    <link href="https://octopuslian.github.io/2021/01/22/geekbang-gatc-04-stack-and-queue/"/>
    <id>https://octopuslian.github.io/2021/01/22/geekbang-gatc-04-stack-and-queue/</id>
    <published>2021-01-22T04:57:41.000Z</published>
    <updated>2021-01-22T13:59:42.618Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>想象成一个先入后出的容器：</p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/stack.png" alt></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>像排队，先来先出：</p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/queue.png" alt></p><h2 id="栈和队列关键点"><a href="#栈和队列关键点" class="headerlink" title="栈和队列关键点"></a>栈和队列关键点</h2><ul><li>栈（Stack）：先入后出；添加、删除操作的时间复杂度都为O(1)，查询为O(n)</li><li>队列（Queue）：先入后出；添加、删除操作的时间复杂度都为O(1),查询为O(n)</li></ul><h2 id="双端队列-Double-End-Queue"><a href="#双端队列-Double-End-Queue" class="headerlink" title="双端队列(Double End Queue)"></a>双端队列(Double End Queue)</h2><p>首端和尾端都可以添加、删除元素：</p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/dequeue.png" alt></p><ul><li>简单理解：两端都可以进出的队列；</li><li>插入和删除都是O(1)的操作。</li></ul><h2 id="Stack、Queue、Deque的工程实现"><a href="#Stack、Queue、Deque的工程实现" class="headerlink" title="Stack、Queue、Deque的工程实现"></a>Stack、Queue、Deque的工程实现</h2><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/stack-java.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/queue-java.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/deque-java.png" alt></p><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/stack-queue-python.png" alt></p><h2 id="优先队列-Priority-Queue"><a href="#优先队列-Priority-Queue" class="headerlink" title="优先队列(Priority Queue)"></a>优先队列(Priority Queue)</h2><ul><li>插入操作：O(1)</li><li>取出操作：O(logN)-按照元素的优先级取出</li><li>底层具体实现的数据结构较为多样和复杂：heap、bst、treap</li></ul><h2 id="Java源码分析"><a href="#Java源码分析" class="headerlink" title="Java源码分析"></a>Java源码分析</h2><p><a href="http://developer.classpath.org/doc/java/util/Stack-source.html" target="_blank" rel="noopener">Stack-source Java</a></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><img src="/2021/01/22/geekbang-gatc-04-stack-and-queue/fuzadu.png" alt></p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li>1，用新的api-addfirst,addlast去改写</li><li>2，分析Queue，Priority Queue源码</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Stack.html" target="_blank" rel="noopener">Stack Java 12 doc</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The Stack class represents a last-in-first-out (LIFO) stack of objects. It extends class Vector with five operations that allow a vector to be treated as a stack. The usual push and pop operations are provided, as well as a method to peek at the top item on the stack, a method to test for whether the stack is empty, and a method to search the stack for an item and discover how far it is from the top.</span><br><span class="line">When a stack is first created, it contains no items.</span><br><span class="line"></span><br><span class="line">A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example:</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/PriorityQueue.html" target="_blank" rel="noopener">Priority Queue Java 12 doc</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Learn-algo" scheme="https://octopuslian.github.io/categories/Learn-algo/"/>
    
    
      <category term="数据结构" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="https://octopuslian.github.io/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="https://octopuslian.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="优先队列" scheme="https://octopuslian.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="双端队列" scheme="https://octopuslian.github.io/tags/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>迁移Hexo博客的方案</title>
    <link href="https://octopuslian.github.io/2021/01/15/hexo-blog-move-new-res-solution/"/>
    <id>https://octopuslian.github.io/2021/01/15/hexo-blog-move-new-res-solution/</id>
    <published>2021-01-15T04:00:05.000Z</published>
    <updated>2021-01-15T04:17:41.928Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为买了一台新电脑，所以需要将旧电脑上本地的<code>Hexo</code>文件夹迁移到新的电脑上来，写以此文记录迁移<code>Hexo</code>的过程。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="第一步，在新电脑上搭建Hexo的环境"><a href="#第一步，在新电脑上搭建Hexo的环境" class="headerlink" title="第一步，在新电脑上搭建Hexo的环境"></a>第一步，在新电脑上搭建Hexo的环境</h3><p>安装<code>node</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure><p>安装<code>npm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y npm</span><br></pre></td></tr></table></figure><p>安装<code>hexo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后试试<code>hexo -v</code>，看看是否安装成功，如果成功，应该有以下显示：</p><p><img src="/2021/01/15/hexo-blog-move-new-res-solution/hexo-v.png" alt></p><h3 id="第二步，复制旧电脑上的Hexo文件夹到新电脑上"><a href="#第二步，复制旧电脑上的Hexo文件夹到新电脑上" class="headerlink" title="第二步，复制旧电脑上的Hexo文件夹到新电脑上"></a>第二步，复制旧电脑上的<code>Hexo</code>文件夹到新电脑上</h3><h3 id="第三步，使用命令测试本地能否将博客页面渲染成功"><a href="#第三步，使用命令测试本地能否将博客页面渲染成功" class="headerlink" title="第三步，使用命令测试本地能否将博客页面渲染成功"></a>第三步，使用命令测试本地能否将博客页面渲染成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>如果渲染成功，应该可以在<code>http://localhost:4000</code>上看到自己的博客页面：</p><p><img src="/2021/01/15/hexo-blog-move-new-res-solution/hexo-page.png" alt></p><h3 id="第四步，推送到远程仓库"><a href="#第四步，推送到远程仓库" class="headerlink" title="第四步，推送到远程仓库"></a>第四步，推送到远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>至此，<code>Hexo</code>博客的迁移就做完了。</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h
      
    
    </summary>
    
    
      <category term="Solution-notes" scheme="https://octopuslian.github.io/categories/Solution-notes/"/>
    
    
      <category term="Hexo" scheme="https://octopuslian.github.io/tags/Hexo/"/>
    
      <category term="迁移" scheme="https://octopuslian.github.io/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="Blog" scheme="https://octopuslian.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>今天我换了一台新电脑</title>
    <link href="https://octopuslian.github.io/2021/01/13/i-get-a-new-computer-today/"/>
    <id>https://octopuslian.github.io/2021/01/13/i-get-a-new-computer-today/</id>
    <published>2021-01-13T14:18:12.000Z</published>
    <updated>2021-01-13T14:20:01.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p>今天换了一台新电脑，替代我那用了六年之久的Dell灵越笔记本电脑。</p><p>最新的intel CPU+512G固态硬盘+16G内存+4G独显，外加价位合适，所以立马入手。</p><p>另外宏碁的标志acer，让我想起大学参加竞赛时候ac一道道题目的感觉，ac+er也更好合适，工程师的工作不就是ac一个接一个的问题吗？</p><p>所以后期打算如何规划呢？</p><ul><li><p>安装Visual Studio，把图形学搞一下，正好有个关于DirectX的项目顺便做了；</p></li><li><p>务实基础，算法、数据结构、网络和操作系统；</p></li><li><p>每周尝试在Medium上翻译一篇技术文章；</p></li><li><p>准备软考中级网络工程师；</p></li><li><p>学习理财，边学习理论边在蚂蚁财富上进行实践；</p></li><li><p>开始整理LeetCode、LintCode、牛客网和面试书籍上的题解；</p></li><li><p>整理常考面试题；</p></li><li><p>坚持锻炼，早睡早起。</p></li></ul><p>GOOD LUCK ^_^</p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;今天换了一台新电脑，替代我那用了六年之久的Dell灵越笔记本电脑。&lt;/p&gt;&lt;p&gt;最新的intel CPU+512G固态硬盘+
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="电脑" scheme="https://octopuslian.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
      <category term="换新" scheme="https://octopuslian.github.io/tags/%E6%8D%A2%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>2021读书计划</title>
    <link href="https://octopuslian.github.io/2021/01/02/2021-read-books-plan/"/>
    <id>https://octopuslian.github.io/2021/01/02/2021-read-books-plan/</id>
    <published>2021-01-02T07:51:56.000Z</published>
    <updated>2021-01-02T08:02:34.292Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p>2020年，我利用上下班和等车时间，读了很多书，发现时间虽然碎片，有时看不起眼的3-5分钟，其实如果加以利用的话，就是200-300秒的思考时间，将这几百秒的时间乘以每天十几个时间碎片片段，也是一块不小的时间空隙呢。</p><p>当然碎片化也不好，就是不能集中注意力，也许看了第三章，打断阅读后再回过头来已经忘记了第一章节的内容，因此我个人建议可以给每一章末尾或印象深刻的段落加上笔记，这样当我看到我写过的东西，就会立刻回想起原先的内容。</p><p>下面是我利用思维导图工具制定的一份2021阅读计划，希望年底前可以完成它。</p><p>GOOD LUCK.</p><p><img src="/2021/01/02/2021-read-books-plan/2021-book-plan.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;2020年，我利用上下班和等车时间，读了很多书，发现时间虽然碎片，有时看不起眼的3-5分钟，其实如果加以利用的话，就是200
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="计划" scheme="https://octopuslian.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="读书" scheme="https://octopuslian.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="阅读" scheme="https://octopuslian.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="豆瓣TOP250" scheme="https://octopuslian.github.io/tags/%E8%B1%86%E7%93%A3TOP250/"/>
    
  </entry>
  
  <entry>
    <title>2020年终总结——All is well</title>
    <link href="https://octopuslian.github.io/2020/12/31/2020-year-summary-all-is-well/"/>
    <id>https://octopuslian.github.io/2020/12/31/2020-year-summary-all-is-well/</id>
    <published>2020-12-31T15:34:40.000Z</published>
    <updated>2021-01-01T10:03:34.006Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p>兰彻：那天我懂了，心很脆弱，你得学会哄它，不管遇到多大困难，告诉你的心，All is well 一切顺利。<br>拉朱：那能解决问题吗<br>兰彻：不能啊，但你得到了面对问题的勇气。</p><pre><code>——《三傻大闹宝莱坞》  </code></pre><p>今年发生了许多事，面试、离职、裸辞、备考…，写以此文，纪念我已经逝去的2020。</p><p>从毕业到职场，已经过去了两年半，从满心欢喜的实现了我小时候的梦想——工程师，到如今开始对大环境的迷茫和怀疑，我一时不知所措。</p><h2 id="疫情期间的无所事事"><a href="#疫情期间的无所事事" class="headerlink" title="疫情期间的无所事事"></a>疫情期间的无所事事</h2><p>最开始提醒我要戴口罩的是一位在武汉某人民医院工作的朋友，虽然新闻上没报道，但他还是及时把这条信息传达给了我，于是我下班就去街上的药店买口罩，结果第二天上班再去买时已经卖光了，庆幸自己提前一天买到了。</p><p>疫情期间是我从工作以来和家人待的最久的一次，基本上是吃玩睡循环往复，偶尔刷一刷leetcode，因为我有工作，所以不着急跳槽。只是没有想到这场疫情会持续一年之久…</p><h2 id="裸辞的萌芽"><a href="#裸辞的萌芽" class="headerlink" title="裸辞的萌芽"></a>裸辞的萌芽</h2><p>最开始有离职的想法，是因为没给发发年终奖，虽然兢兢业业的工作一年，写了不少bug，但至少都修复了，然而当这最后的底线被突破后，我已经无所留恋，于是开始物色下一家，然而尴尬的是大厂缩招，小厂看不上，于是陷入了这样的死循环，直到11月研究生网上报名通过，才正式提出离职。</p><p>So，为什么会选择离职去考研呢？</p><p>有些事情当时做不知所以然，只有经历了才知道曾经原来一直生活在天堂里，比如读书，比如学历。</p><p>如果你也像我一样，感到慌张，感到无助，请将右手放在左心房这，对自己说一句“All is well”，因为接下来我将对我遇到的情况进行全面辩证地分析。</p><p>以下内容将以对话采访形式进行论述。</p><h2 id="如果研究生读完出来年龄大怎么办？"><a href="#如果研究生读完出来年龄大怎么办？" class="headerlink" title="如果研究生读完出来年龄大怎么办？"></a>如果研究生读完出来年龄大怎么办？</h2><p>什么是年龄大，怎么定义年龄大。有些人年过20却整天唉声叹气，像看破了红尘似的，有些人年过80还想着诗和远方，所以我认为年龄大小与身份证上的数字无关。</p><p>言归正传，如果想考，就尽力去考，虽然有时候也许复试会因为你的年龄大而pass你，但这足以证明不是你能力的问题，因为学习是终身要做的事情。</p><h2 id="如果没考上怎么办？"><a href="#如果没考上怎么办？" class="headerlink" title="如果没考上怎么办？"></a>如果没考上怎么办？</h2><p>这个问题我12月初想过，我想很多考研的人都想过。</p><p>没考上如果还想考，就做好规划接着考，<strong>不管被自己的懦弱和不中用再怎么狠狠的打击，你都要燃烧你的心，咬紧牙关向前走，就算你听下脚步蹲坐下来，时间的流动也不会为你停止，时间不会陪伴你承受悲伤。</strong></p><h2 id="你有过35岁的危机感吗？"><a href="#你有过35岁的危机感吗？" class="headerlink" title="你有过35岁的危机感吗？"></a>你有过35岁的危机感吗？</h2><p>这个问题我问了不下三个人，虽然我有技术在身，虽然我的学历也不低，虽然我读了很多书，但是面对这样的现实问题，我不得不停下来思考，如果我到35岁了，会被淘汰吗？</p><p>师哥M：适当焦虑是正常的，但不需要过度焦虑，做好当下该做的事情；<br>极客时间直播：踏踏实实做事，没有心思去担心35岁；</p><p>虽然我目前离35还有11年的距离，但这就是132个月，四万多天，所以我根据以上两位的看法，做出了以下规划：</p><ul><li>做好眼前的事，提升核心竞争力；</li><li>根据职业和兴趣爱好搭建自己的副业体系，例如翻译、技术培训和理财；</li><li>写文章，扩展人脉；</li><li>多读有深度的书，比如豆瓣TOP250；</li><li>打造个人品牌影响力，例如公众号、博客；</li></ul><p>种一棵树最好在十年前，其次是现在，于是我今天先将大树的种子洒进时光的泥土里。</p><h2 id="坚持做一件事真的有意义吗？"><a href="#坚持做一件事真的有意义吗？" class="headerlink" title="坚持做一件事真的有意义吗？"></a>坚持做一件事真的有意义吗？</h2><p>有的。</p><p>至少会让自己很有成就感。</p><p>比如大学二年级坚持在博客园创作，比如今年3月坚持每天至少一道的算法题，比如坚持生日来临和年底的创作，虽然曾经的想法很单纯，就是记录下来方便以后查阅，但后来阅读量的飙升，让我借此结识大佬和得到了新的就业机会。</p><p>也许你曾迷茫后悔做了这些无用功，但是高中物理告诉我：一种能量不会凭空消失，也不会凭空产生，它只会以一种形式传递到另一种形式去，努力亦是如此。</p><h2 id="真的是越老记忆就越衰退吗？"><a href="#真的是越老记忆就越衰退吗？" class="headerlink" title="真的是越老记忆就越衰退吗？"></a>真的是越老记忆就越衰退吗？</h2><p>是的，所以一定要趁年轻把想做的事情做了。</p><p>我曾以为我的记忆力就此为止只能记住于几百个英文单词，可是当我离考前一个小时的时候，我惊喜的发现我竟然可以默背下来两篇英语模板作文，所以说记忆力这东西，给点压力会记得更牢。</p><h2 id="焦虑和担忧是如何克服的？"><a href="#焦虑和担忧是如何克服的？" class="headerlink" title="焦虑和担忧是如何克服的？"></a>焦虑和担忧是如何克服的？</h2><p>《三傻大闹宝莱坞》这部电影对我影响很大，小时候只沉溺于它带给我的喜剧欢乐，直到考前我才明白，我曾经就像剧中的拉朱，对于未知的事情总是充满着担忧与恐惧————考试前总是希望再多背一个单词、一个公式，庆幸于也许就能挽救我于及格线的边缘；职场上总是装作老好人，背了锅也只能自己悄悄的扛；对于领导有时的偏见，丢工作的恐惧已经大于了为自己辩解…直到我将这一切都抛弃，将自己曾经固有的体系打破，才发现原来不过如此。</p><p>人无完人，有些人太过完美，也只是由于他的亮点几乎遮住了瑕疵。我曾做过两次心理沙盘，在沙盘上楼房、小河、游艇应有尽有，而老师给我的建议是我的内心情感世界是非常丰富的，然而太过丰富就会导致我对待一些事物会过度要求完美，我当时心想这不是好事情吗，为何要用“然而、但是”这种词表示转折呢？</p><p>直到现在我才摸索出一些边缘，我一直活成了教科书里要求的样子，殊不知每个人都有各自的特点，为了约束和规范，就制定了这一套标准的流程，有点像郑渊洁童话里的一段变兔子的故事。</p><p>综上所述，不要给自己太大压力，适当焦虑，遇到问题对自己的心安慰一句”All is well”，期待我在新的一年里继续披荆斩棘。</p><p><img src="/2020/12/31/2020-year-summary-all-is-well/dengning-keluge.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;兰彻：那天我懂了，心很脆弱，你得学会哄它，不管遇到多大困难，告诉你的心，All is well 一切顺利。&lt;br&gt;拉朱：那能
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
  </entry>
  
  <entry>
    <title>Sad Workers</title>
    <link href="https://octopuslian.github.io/2020/12/18/how-sad-workers/"/>
    <id>https://octopuslian.github.io/2020/12/18/how-sad-workers/</id>
    <published>2020-12-18T15:28:03.000Z</published>
    <updated>2020-12-30T15:55:47.237Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p>打工人，越来越难了。</p><p>曾以为打工只是出卖自己的劳动力换取报酬，然而没想到行业内卷的这么严重，停止等于倒退；没有今天的996，哪有明天的669；优化不能加班的员工；35岁被裁…现在要成立HR联盟，垄断员工肆意跳槽。</p><p>我不知道未来将会怎样，今天意外刷到一部冷门电影<a href="https://movie.douban.com/subject/4116481/" target="_blank" rel="noopener">《极乐空间》</a>，放佛看到了打工人的未来。</p><p>社会缺什么，就会赞美什么————缺爱国情怀，就去拍各种抗日神剧；缺真善美，就去拍各种脑残傻白甜的电视剧…我一直很喜欢<a href="https://movie.douban.com/subject/5350027/" target="_blank" rel="noopener">《妖猫转》</a>里的一段话：<strong>人心这么黑暗，我想找到一种不再痛苦的秘密。</strong>而最后杨玉环给了我一个答案：生活是不完美的，但我依然可以选择去拥抱生活的美好。</p><p>什么是美好呢？也许是一次温暖的鼓励，也许是临行前父母的嘱托，也许是高考前妹妹大声喊着“哥哥高考必胜”，也许是大雪纷飞中公交车司机多等了我一分钟…可是，当我步入职场后，我却发现自己越来越难以坚守本心。</p><p>最近忙着申请了成都市的失业补助金，也为极客时间又当了一回审稿人，看着这些忙忙碌碌我生活奔波的打工人，是的，也许我就是一滴水，多我少我都算不了什么，因为我迟早要融入这浩浩荡荡的打工人海中去随波逐流，为着这居高不下的房价当做我奋斗的目标，衡量工作的成功而是以工作作为评级。</p><p>只是，如果允许我再任性一回，我想再回归本心，去找寻真正的出路。</p><p>（最近备考压力有些大，看着杭州市成立了HR联盟，难免心里有些膈应，写一此文吐槽一番…）</p><p><a href="https://www.zhihu.com/question/357459810/answer/908791884" target="_blank" rel="noopener">如何看待网传网易裁员，让保安把身患绝症的 5 年老员工赶出公司一事？</a><br><a href="https://www.zhihu.com/question/434158902" target="_blank" rel="noopener">如何评价杭州阿里、海康、网易等组成 HR 联盟？</a><br><a href="https://www.zhihu.com/question/359047845/answer/921118877" target="_blank" rel="noopener">「华为前员工李洪元被羁押 251 天」 事发过程是怎样的？还有哪些值得注意的疑点和信息？</a><br><a href="https://www.zhihu.com/question/308375308/answer/654108580" target="_blank" rel="noopener">如何看待华为工程师 22 月无休后猝死的传闻，事件真相如何？</a><br><a href="https://www.zhihu.com/question/407009249" target="_blank" rel="noopener">如何看待腾讯高级工程师因「每天在岗不足8小时」被辞退，反诉加班费等 500 余万两度败诉？</a></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;打工人，越来越难了。&lt;/p&gt;&lt;p&gt;曾以为打工只是出卖自己的劳动力换取报酬，然而没想到行业内卷的这么严重，停止等于倒退；没有今
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="打工人" scheme="https://octopuslian.github.io/tags/%E6%89%93%E5%B7%A5%E4%BA%BA/"/>
    
      <category term="悲哀" scheme="https://octopuslian.github.io/tags/%E6%82%B2%E5%93%80/"/>
    
      <category term="出路" scheme="https://octopuslian.github.io/tags/%E5%87%BA%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Leave——成都华栖云</title>
    <link href="https://octopuslian.github.io/2020/12/10/leave-china-sichuan-chengdu-chinamcloud/"/>
    <id>https://octopuslian.github.io/2020/12/10/leave-china-sichuan-chengdu-chinamcloud/</id>
    <published>2020-12-10T14:21:30.000Z</published>
    <updated>2020-12-30T15:59:37.099Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><p><strong>很多事情我无法改变，但可以选择离开。 ————题记</strong></p><p>成都华栖云是我从成都飞鱼离职后入职的一家传统互联网型公司，主要面向的客户是国企和学校。</p><p>从大学毕业到现在的两年内，我在这家公司不断积累社会经验，也解开了我大学时曾有过的困惑。</p><h2 id="困惑一-为什么产品经常会和研发打架？"><a href="#困惑一-为什么产品经常会和研发打架？" class="headerlink" title="困惑一_为什么产品经常会和研发打架？"></a>困惑一_为什么产品经常会和研发打架？</h2><p>这个困惑最先来自于大学看到的段子，直到毕业后我才真实体会到这里面的心酸和无奈。</p><p>2019年夏天，我记得非常清楚，已经数不清多少次，想骂我部门的W姓产品经理，但不好听的话到嘴边就变成了“好的，我先去实现一下。”</p><p>每次对需求，不说个具体时间，等火烧眉毛了才知道着急，最后矛头全指在我这里；对需求的时候，只要稍微涉及点和技术相关的话题，立马怼我一句“不要给我讲技术，我听不懂。”——我TM又没有叫你写程序，只是我觉得这样不好实现的原因给你说一下，你就不耐烦了？那我还懒得讲了呢。</p><p>有一次我在钉钉上写了200多字的话想发过去给她，但还是忍住了，算了，忍忍就过去了。</p><h2 id="困惑二-为什么要加班？"><a href="#困惑二-为什么要加班？" class="headerlink" title="困惑二_为什么要加班？"></a>困惑二_为什么要加班？</h2><p>一个词——<strong>内卷</strong>。</p><p>现在的行业，讲究的就是快，先不看质量如何，你能立马回复，立马拿出个样品，你就比别人领先一步，以至于明明需要一个月做完的东西，也许加加班3天就搞定，我不知道这是我国程序员的福报还是悲哀呢？</p><p>记得呼兰在脱口秀中曾说过这样一件事：当他刚回国做管理的时候，有个需求他评估了以下觉得至少需要2周才能做完，于是问底下的人多久做完，他们说3天就可以做出来，呼兰啊了一声，底下的人以为时间太长了，于是咬咬牙说加班两天内可以搞定。</p><p>而从公司内部竞争来看，我发现加班多的部门，越容易得到领导层的重视。</p><h2 id="困惑三-为什么职场上很少像上学那会能遇到可以喝酒吃肉的朋友？"><a href="#困惑三-为什么职场上很少像上学那会能遇到可以喝酒吃肉的朋友？" class="headerlink" title="困惑三_为什么职场上很少像上学那会能遇到可以喝酒吃肉的朋友？"></a>困惑三_为什么职场上很少像上学那会能遇到可以喝酒吃肉的朋友？</h2><p>步入社会前，我在象牙塔里听到最多的提醒就是<strong>千万不要把同事当朋友。</strong></p><p>为什么这么说呢，我通过以下一个例子来说明。</p><p>部门内原先有个硕士毕业做C++的同事S，与一位本科毕业的同事H同毕业于一所大学，本来我以为是校友沟通会多一些吧，看他们平时也有说有笑的，然而在同事S离职后，同事H没事就在我跟前抱怨同事S的代码烂的一批，我说至于吗，这项目代码又不是他S一个人写的，同事H摇摇头，还是一直在贬低和骂同事S，还咒骂同事S说就他这水平，即时跳槽去了大厂照样混不好。</p><p>我心想呵呵，也许这就是所谓的酸，见不得别人的好，首先别人混的好不好和你没关系吧，其次人家跳槽去了大厂，薪资比你高出至少一个级别，接触的人脉和技术与你这井底之蛙般的人也不同。</p><p>另外，对于同事H这种人，我只想说<strong>说人是非者，必是是非人</strong>。因为同事H不光在我跟前骂过同事S，还骂过2019年一位已经离职的老实同事J，不停的骂不停的损，有意思吗？而通过观察同事H吐槽人的逻辑，我也预测到在我离职的时候他也会这样说我，果不其然，我在同事Y那得到的验证。</p><p>所以说，在职场上，就只管做好自己的事，不传谣，不信谣，能遇到一个可以当做朋友的同事，那是我的运气，如果没有遇到，那我也没有损失，并将继续坚持走我的职场路。</p><h4 id="很多事情我无法改变，但可以选择离开"><a href="#很多事情我无法改变，但可以选择离开" class="headerlink" title="很多事情我无法改变，但可以选择离开"></a>很多事情我无法改变，但可以选择离开</h4><p>这句话最先实在<a href="https://github.com/623637646/996.Leave" target="_blank" rel="noopener">gitub-996.Leave</a>上看到的，当时全国爆发了996icu，于是一位在新加坡工作的程序员写下了这些话，讲真，我是羡慕了，你呢？</p><h2 id="无法改变之国人加班的魔咒"><a href="#无法改变之国人加班的魔咒" class="headerlink" title="无法改变之国人加班的魔咒"></a>无法改变之国人加班的魔咒</h2><p>以前也许996加班是互联网程序员的福报，而现在996几乎是各行各业的福报。</p><p>我仍记得，我刚毕业的时候，来成都求职，我去面试一家游戏小公司的C#客户端岗，然后HR就说我们这公司目前在业务上升期，你进来可能要9107工作制，薪资给你2k，你看能接受吗？我当时还不清楚9107是什么概念，于是我说考虑下，结果那家公司就没下文了。</p><p>为什么我要说这件事，因为我真的发现，<strong>我们的时间根本不值钱！！！</strong></p><p>你想找一个朝九晚五的工作，对不起，没有，996爱干不干，外面还有好多待业的；</p><p>你想找一个996但工资开的和华为一样高的工作，对不起，没有，5k爱干不干；</p><p>你想找一个996工资没有华为高但有加班费的工作，对不起，没有，我有让你加班吗，是你自愿的；</p><p>你想找一个996工资没有华为高没有加班费但压力不是很大的，对不起，没有，算了你的问题太多了我还是找个实习生来吧…</p><p>社会上的现状，让我的世界观一点点的崩塌，我开始迷茫，既然无法改变，我只能选择离开，找个地方静静思考未来合适的出路。</p><h2 id="无法改变之同事的白眼和乱糟糟的管理"><a href="#无法改变之同事的白眼和乱糟糟的管理" class="headerlink" title="无法改变之同事的白眼和乱糟糟的管理"></a>无法改变之同事的白眼和乱糟糟的管理</h2><p>刚入公司的导师Y曾对我说过两遍一模一样的话：有些人的尊重不是发自内心。</p><p>是的，就像我对某些同事的尊重就不是发自内心的，只是因为我接你的项目时暂时表现出耐心和虚心求教的面孔，可是，当你删我微信，删我gitlab账号权限的时候，这层窗户纸就彻底被捅破了。</p><p>接受同事D写的代码，我不得不说，我看不下去，但不得不看，因为维护这份代码是我可以继续在这家公司待下去的充分必要条件。可是，既然是交接，为什么交接的时候你写的bug叫我来改，我TM怎么晓得整个流程是什么样的…好，领导说叫我改，那我改好又出bug了，最后交还给同事D，结果第二天就把我gitlab权限删了，微信上问他怎么回事，好家伙，发的消息被拒收了，因为我不是他好友，呵呵，好吧，于是我舔着脸问同事Y如何联系到同事D，我当时心想，如果同事D敢当面承认删我号是因为项目的原因，我敬你是条汉子，敢作敢当，可是同事D最后说是他删错了，搞不搞笑哦，所以从此，同事D在我眼里和小人没什么两样，我唯一能做的就是远离，离的越远越好，最好从此不再有交集。</p><h2 id="无法改变之领导眼中的标签"><a href="#无法改变之领导眼中的标签" class="headerlink" title="无法改变之领导眼中的标签"></a>无法改变之领导眼中的标签</h2><p>我在这个部门的领导其实是个很务实的人，从来不给我画大饼，一向都是实事求是，具体问题具体分析，曾经有次还拍拍我的肩部，说了句小伙子好好干，不需要有太大压力，我当时真的很感动，因为从毕业到现在，在职场上还从没有人给过我这样的鼓励。</p><p>然而，人的观念就像二维坐标系上的y一样，随着小道消息x的不断变多，这条曲线的斜率不断变大，所以当我被打上负面的标签时，就是这家公司做到头的时候了。</p><p>比如在接手同事D的项目后，bug变得很多，一时解决不过来，而这时候同事D还在冷嘲热讽，一会说我能力不行，一会说我眼睛有问题，我当时真想一个嘴巴子扇过去，再补上一个回旋踢，将同事D的嘴巴打歪，但我还是忍住了。也许这就是社会职场给我上的第一课。</p><p>就这样，经历的各种bug和背后小报告，领导对我的看法变成了负面，而我也在今年为部门做了巨大的牺牲，没有了年终奖，而这给我造成的直接后果就是，我对这个部门的彻底失望和死心，后面的规划，就不再以部门利益为第一位，而是自己寻找新的出路和转机。</p><h2 id="无法改变之研发卑微的地位"><a href="#无法改变之研发卑微的地位" class="headerlink" title="无法改变之研发卑微的地位"></a>无法改变之研发卑微的地位</h2><p>有次在电梯里听到公司的销售聊起方案书，只要采纳就能奖励18w以上，我心动了，突然想想我在这干研发，虽然表面上看着很光鲜，搞技术，但讲真地位还不如销售那些人。没加班费没福利没节日礼物，有时一个美好的周末就因为一句随口的加班被毁了，不好意思，这样卑微的研发，我不稀罕。</p><p>是的，我有段时间开始琢磨，写代码真的是我所热爱的吗？？？</p><p>我仍记得，我高一第一次接触写程序，那种难以描述的喜悦之情，大二的时候和队友在机房里AC一道道算法题的快感…可是全被现在这该死的制度给磨没了。</p><p>不过如果回到最初的原点，我发现变的不是我，是这个环境，曾经的我想法很纯粹，喜欢挑战逻辑性强的题目，如果解答不出来，我就会上论坛讨论，上博客吸收别人的想法，寻找一系列和这种题相关的蛛丝马迹，直到把它搞定，并在此过程中意外结识了很多竞赛大佬和读硕士读博士的学长。</p><p>我想，这也许就是作为技术人简单又纯粹的快乐吧，所以，既然不喜欢且无法改变，那就只能默默选择离开。</p><h2 id="一些需要澄清的真相"><a href="#一些需要澄清的真相" class="headerlink" title="一些需要澄清的真相"></a>一些需要澄清的真相</h2><p>两年中多多少少发生了一些让领导或同事不解的事情，虽然已经没有澄清的必要，但我还是要借此机会说明以下，未来也许有某个熟悉的人访问进来，突然大悟。</p><h3 id="真相一-2019年农历七夕让加班但我关手机的真实原因"><a href="#真相一-2019年农历七夕让加班但我关手机的真实原因" class="headerlink" title="真相一_2019年农历七夕让加班但我关手机的真实原因"></a>真相一_2019年农历七夕让加班但我关手机的真实原因</h3><p>2019年七夕这一天晚上，本来应该在公司加班，因为明天要演示，但我提前到家，然后手机关机，因此Dong总和XY姐对我很不满，其实真实情况是这样：2019年七夕，我早晨在元祖食品订好蛋糕，准备在七夕下班给女友一个小惊喜，结果我骑共享单车刚到家就接到产品经理W的电话，告知我要过去加班，因为这个人经常说话不算数，且小题大做，所以我理所应当的挂了电话就把她拉黑，也就没有去加班的意愿，然而如果其他人打完电话我会立马过去，也算是我感情用事吧，哈哈。</p><h3 id="真相二-2019年端午节三天没有去公司加班的真实原因"><a href="#真相二-2019年端午节三天没有去公司加班的真实原因" class="headerlink" title="真相二_2019年端午节三天没有去公司加班的真实原因"></a>真相二_2019年端午节三天没有去公司加班的真实原因</h3><p>2019年端午节前一天，同事D说有个紧急需求，给产品W说明情况，推迟到下周发版，同事D叫我周末来公司，我心里呵呵一笑，你有什么权力叫我去加班，但心里这么想，表面上还得装作言听计从的样子，而正好端午节那天我女朋友从新疆乌鲁木齐飞到成都来了，所以我就把我周末的时间全用在和女朋友相处和逛街了，对于工作和爱情，我果断选择后者。</p><h3 id="真相三-2020年清明节三天叫加班赶需求但我没动的真实原因"><a href="#真相三-2020年清明节三天叫加班赶需求但我没动的真实原因" class="headerlink" title="真相三_2020年清明节三天叫加班赶需求但我没动的真实原因"></a>真相三_2020年清明节三天叫加班赶需求但我没动的真实原因</h3><p>2020年清明节，又TM叫我加班，而之前我已经连续加班半个月了，所以这次我果断选择反抗，况且2019年年终奖都没得，我凭什么这么卖命干活？？？于是我等要放假的那个下午，背上包赶紧打卡离开公司，当时本想着清明来了就提离职，但这时候我女朋友告诉我它不想工作了，准备裸辞，中间辞职的原因忽略，所以我当时考虑到开销，决定我先不辞职，等她找到新工作了，我再辞职。就这样，从3月耗到了11月，她终于转正了，而我也受够领导的指指点点了，终于，一切尘埃落定。</p><h3 id="真相四-为什么你会觉得我的逻辑性思维差"><a href="#真相四-为什么你会觉得我的逻辑性思维差" class="headerlink" title="真相四_为什么你会觉得我的逻辑性思维差"></a>真相四_为什么你会觉得我的逻辑性思维差</h3><p>很直接的原因，因为我不想动脑了，有些东西既然已经习惯了复制粘贴，那何必动脑呢。其次，我在想一个问题的时候，最讨厌最讨厌最讨厌旁边的人对我指手画脚，有什么急事不能等我想完理清脉络了再问？？？就算我写的程序再糟糕，是不是得先把问题解决了，你TM一直在我耳边唠叨说架构设计不对，优化度不高，拜托，你的工作经验是我的几十倍，我要是有你的三分之一，我还会在这里呆？</p><p>之前离职的同事S也跟我说过，最烦别人在我旁边一直说，如果你这么能，那这些东西都交给你来做岂不是省心多了？？？</p><h2 id="讨厌的同事"><a href="#讨厌的同事" class="headerlink" title="讨厌的同事"></a>讨厌的同事</h2><p>在此记录我在这个企业遇到的一些讨厌的人，以此也当做标记，看看十年后我是否会变成这样的人。</p><h3 id="一位天天吐痰的死鱼眼"><a href="#一位天天吐痰的死鱼眼" class="headerlink" title="一位天天吐痰的死鱼眼"></a>一位天天吐痰的死鱼眼</h3><p>不知道为何，我总是会和他在茶水间遇到，他瞪着一双死鱼眼，像做贼似的矗立在洗手池那，等我打完开水后，他就开始各种咳嗽，各种打喷嚏，各种吐痰吐进洗手池内。麻烦你多挪几步路跑厕所去吐可以吗，这边好多人都在这洗手洗饭盒，你万一吐在外面….额，画面好恶心。</p><h3 id="大声吼叫的驼背男"><a href="#大声吼叫的驼背男" class="headerlink" title="大声吼叫的驼背男"></a>大声吼叫的驼背男</h3><p>总是拖着背，而这是次要的，我非常讨厌他是因为在午休的时候，嗓门故意提高，1-2次也就算了，经常这样，仿佛生怕我们不知道你在谈几个亿的大单子似的。</p><h3 id="奋斗逼们"><a href="#奋斗逼们" class="headerlink" title="奋斗逼们"></a>奋斗逼们</h3><p>这个公司有个很神奇的部门，经常加班，带头的领导常在群里打鸡血，仿佛每个人的手上都握着这个公司的命脉。但不得不说，因为加班，它一跃变成公司最赚钱的部门，但它准备对全公司实行995工作制，那我就不愿意了。</p><p>记得有个成信大的学弟说，他有好几个朋友被分到这个部门，以至于经常开会开到9-10点，好吧，既然无法改变这现状，那我果断选择离开。</p><h2 id="在这家企业的收获"><a href="#在这家企业的收获" class="headerlink" title="在这家企业的收获"></a>在这家企业的收获</h2><ul><li>最大的收获就是项目经验和工作经验得到了积累，知道什么是自己不想要的；</li><li>心态上的变化，对bug不再感到害怕，而是抽丝剥茧顺藤摸瓜找到出现bug的原因，举一反三，做好总结；</li><li>沟通上的变化，不再做老好人，不合适的需求必须砍掉，态度强硬；</li><li>结识了几位不错的同事&amp;朋友，后期会继续保持联系；</li><li>住了快23个月的公司提供的廉价青年公寓，给我省了很大的一笔租房开销；</li><li>存款突破了六位数，在未来至少一年内就算待业中也不会为生活费发愁；</li><li>潜力激发，曾经一学期都没有学懂的<code>shell</code>脚本，我在精神力高度集中的情况下，边吸收边实践边总结的循环过程中最多6h掌握；</li><li>遇到的第一位技术上的引路人Y，传授于我技术和生活上的宝贵经验。</li></ul><h2 id="结束，也是新的开始"><a href="#结束，也是新的开始" class="headerlink" title="结束，也是新的开始"></a>结束，也是新的开始</h2><p>离开华栖云，我并不后悔，因为我给自己定的毕业第一阶段的职场目标，已经提前一年实现了，后面的路，我想做一些自己喜欢的事情，去看一些一直渴望的风景，早点回家和父母聊聊天，未来，我还是希望能去一些有核心竞争力和完善管理制度的企业发展。</p><p>GOOD LUCK!</p><p><img src="/2020/12/10/leave-china-sichuan-chengdu-chinamcloud/lian.jpg" alt></p><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&lt;strong&gt;很多事情我无法改变，但可以选择离开。 ————题记&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;成都华栖云是我从成都飞鱼离
      
    
    </summary>
    
    
      <category term="Essay" scheme="https://octopuslian.github.io/categories/Essay/"/>
    
    
      <category term="离职" scheme="https://octopuslian.github.io/tags/%E7%A6%BB%E8%81%8C/"/>
    
      <category term="离开" scheme="https://octopuslian.github.io/tags/%E7%A6%BB%E5%BC%80/"/>
    
      <category term="chinamcloud" scheme="https://octopuslian.github.io/tags/chinamcloud/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 1137-n-th-tribonacci-number | 第 N 个泰波那契数</title>
    <link href="https://octopuslian.github.io/2020/12/05/leetcode-1137-n-th-tribonacci-number/"/>
    <id>https://octopuslian.github.io/2020/12/05/leetcode-1137-n-th-tribonacci-number/</id>
    <published>2020-12-05T13:36:40.000Z</published>
    <updated>2020-12-30T16:02:31.802Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/n-th-tribonacci-number/</a></p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tribonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp,x,y,z := <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">3</span>;i &lt;= n;i++ &#123;</span><br><span class="line">        tmp = x + y + z</span><br><span class="line">        x = y</span><br><span class="line">        y = z</span><br><span class="line">        z = tmp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat --><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"9b0e6a8ee9514649c4e7","clientSecret":"93f2b2b36da58f64f4353d6d5b7f6005a9f80d7c","repo":"octopuslian.github.io","owner":"OctopusLian","admin":["OctopusLian"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Feb 06 2021 21:12:22 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="LeetCode-Solutions" scheme="https://octopuslian.github.io/categories/LeetCode-Solutions/"/>
    
    
      <category term="leetcode" scheme="https://octopuslian.github.io/tags/leetcode/"/>
    
      <category term="递归" scheme="https://octopuslian.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="斐波那契" scheme="https://octopuslian.github.io/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/"/>
    
  </entry>
  
</feed>
